<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Spacemacs on 墨斯潘園</title>
        <link>http://yanwushuang.github.io/tags/spacemacs/</link>
        <language>zh-CN</language>
        <author>Mospan</author>
        <rights>Copyright (c) 2016, mospan; all rights reserved.</rights>
        <updated>Thu, 24 Aug 2017 17:08:26 HKT</updated>
        
        <item>
            <title>spacemacs使用初探</title>
            <link>http://yanwushuang.github.io/2017/08/25/spacemacs-use-exploration/</link>
            <pubDate>Thu, 24 Aug 2017 17:08:26 HKT</pubDate>
            <author>Mospan</author>
            <guid>http://yanwushuang.github.io/2017/08/25/spacemacs-use-exploration/</guid>
            <description>

&lt;h1 id=&#34;概述-a-id-sec-1-name-sec-1-a&#34;&gt;概述&lt;a id=&#34;sec-1&#34; name=&#34;sec-1&#34;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;我自从2011年开始使用自己折腾的emacs到现在， 用着它写golang时发现函数列表与补全功能不太好使，一直知道spacemacs的名声，今天想尝试下其效果如果如何，有啥奇妙之处。
我一般用它来写Golang、C、Lua、Shell、GTD和Blog，看看spacemacs是否满足我所需和习惯。&lt;/p&gt;

&lt;h1 id=&#34;安装-a-id-sec-2-name-sec-2-a&#34;&gt;安装&lt;a id=&#34;sec-2&#34; name=&#34;sec-2&#34;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Spacemacs的Github地址为：&lt;a href=&#34;https://github.com/syl20bnr/spacemacs&#34;&gt;https://github.com/syl20bnr/spacemacs&lt;/a&gt;, 如果你的系统已装有Emacs，请先备份Emacs配置文件。因为Spacemacs的配置会覆盖掉原Emacs的配置文件。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~ 
mv .emacs.d .emacs.d.bak 
mv .emacs .emacs.bak
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你的系统没有安装Emacs，需要先安装Emacs，请注意Emacs版本至少为24.4。&lt;/p&gt;

&lt;h2 id=&#34;安装spacemacs-a-id-sec-2-1-name-sec-2-1-a&#34;&gt;安装spacemacs&lt;a id=&#34;sec-2-1&#34; name=&#34;sec-2-1&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;启动spacemacs-a-id-sec-2-2-name-sec-2-2-a&#34;&gt;启动spacemacs&lt;a id=&#34;sec-2-2&#34; name=&#34;sec-2-2&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;emacs -mm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;初次启动Spacemacs会进行初始化配置（启动时会询问使用简、全哪套配置方案），安装依赖有可能需要一段时间。
在通过命令行启动Spacemacs后，可能会发现状态栏乱码了。这是因为字体不支持的原因，需要安装Source Code Pro字体。 同时，还可能需要安装Powerline字体补丁。&lt;/p&gt;

&lt;h1 id=&#34;配置-a-id-sec-3-name-sec-3-a&#34;&gt;配置&lt;a id=&#34;sec-3&#34; name=&#34;sec-3&#34;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;h2 id=&#34;增加启动layers-a-id-sec-3-1-name-sec-3-1-a&#34;&gt;增加启动layers&lt;a id=&#34;sec-3-1&#34; name=&#34;sec-3-1&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;由于我主要写Golang、C、Lua、Shell、GTD和Blog，增加相应的启动layers即可。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dotspacemacs-configuration-layers
&#39;(
  c-c++
  go
  lua
  html
  ;; ----------------------------------------------------------------
  ;; Example of useful layers you may want to use right away.
  ;; Uncomment some layer names and press &amp;lt;SPC f e R&amp;gt; (Vim style) or
  ;; &amp;lt;M-m f e R&amp;gt; (Emacs style) to install them.
  ;; ----------------------------------------------------------------
  helm
  auto-completion
  ;; better-defaults
  emacs-lisp
  git
  markdown
  org
  ;; (shell :variables
  ;;        shell-default-height 30
  ;;        shell-default-position &#39;bottom)
  ;; spell-checking
  ;; syntax-checking
  ;; version-control
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;使用-a-id-sec-4-name-sec-4-a&#34;&gt;使用&lt;a id=&#34;sec-4&#34; name=&#34;sec-4&#34;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;h2 id=&#34;working-with-go-a-id-sec-4-1-name-sec-4-1-a&#34;&gt;Working with Go&lt;a id=&#34;sec-4-1&#34; name=&#34;sec-4-1&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&#34;go-commands-start-with-m-a-id-sec-4-1-1-name-sec-4-1-1-a&#34;&gt;Go commands (start with &lt;code&gt;m&lt;/code&gt;):&lt;a id=&#34;sec-4-1-1&#34; name=&#34;sec-4-1-1&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;table border=&#34;2&#34; cellspacing=&#34;0&#34; cellpadding=&#34;6&#34; rules=&#34;all&#34; frame=&#34;border&#34;&gt;


&lt;colgroup&gt;
&lt;col  class=&#34;left&#34; /&gt;

&lt;col  class=&#34;left&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&#34;col&#34; class=&#34;left&#34;&gt;Key Binding&lt;/th&gt;
&lt;th scope=&#34;col&#34; class=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m h h`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;godoc at point&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m i g`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;goto imports&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m i a`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;add import&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m i r`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;remove unused import&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m e b`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;go-play buffer&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m e r`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;go-play region&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m e d`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;download go-play snippet&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m x x`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;run &#34;go run&#34; for the current &#39;main&#39; package&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m g a`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;jump to matching test file or back from test to code file&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m g c`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;open a clone of the current buffer with a coverage info (`go tool cover -h` for help)&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m g g`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;go jump to definition&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m r n`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;go rename&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m t p`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;run &#34;go test&#34; for the current package&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m t P`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;run &#34;go test&#34; for the current package and all packages under it&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m t t`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;run &#34;go test&#34; for the function you&#39;re currently in (while you&#39;re in a \_.test.go file)&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m t s`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;run &#34;go test&#34; for the suite you&#39;re currently in (requires gocheck)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;go-guru-a-id-sec-4-1-2-name-sec-4-1-2-a&#34;&gt;Go Guru&lt;a id=&#34;sec-4-1-2&#34; name=&#34;sec-4-1-2&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;table border=&#34;2&#34; cellspacing=&#34;0&#34; cellpadding=&#34;6&#34; rules=&#34;all&#34; frame=&#34;border&#34;&gt;


&lt;colgroup&gt;
&lt;col  class=&#34;left&#34; /&gt;

&lt;col  class=&#34;left&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&#34;col&#34; class=&#34;left&#34;&gt;Key Binding&lt;/th&gt;
&lt;th scope=&#34;col&#34; class=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m f d`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;go-guru describe symbol at point&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m f f`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;go-guru show free variables&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m f i`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;go-guru show implements relation&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m f c`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;go-guru show channel sends/receives&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m f r`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;go-guru show referrers&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m f j`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;go-guru jump to symbol definition&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m f p`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;go-guru show what the select expression points to&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m f s`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;go-guru show callstack&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m f e`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;go-guru show possible contants/types for error value&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m f &lt;`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;go-guru show possible callers&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m f &gt;`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;go-guru show call targets&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m f o`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;go-guru set analysis scope&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
        </item>
        
    </channel>
</rss>
