<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>墨斯潘園 on 墨斯潘園</title>
        <link>http://mospany.github.io/</link>
        <language>zh-CN</language>
        <author>Mospan</author>
        <rights>Copyright (c) 2016, mospan; all rights reserved.</rights>
        <updated>Thu, 17 Oct 2019 13:54:40 CST</updated>
        
        <item>
            <title>编辑器终结者: vim与emacs双剑合璧</title>
            <link>http://mospany.github.io/2019/10/17/vim-in-emacs/</link>
            <pubDate>Thu, 17 Oct 2019 13:54:40 CST</pubDate>
            <author>Mospan</author>
            <guid>http://mospany.github.io/2019/10/17/vim-in-emacs/</guid>
            <description>

&lt;p&gt;&lt;img src=&#34;http://blog.mospan.cn/post/img/2019/vim-in-emacs/main.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;orge664f2d&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;神器传说&#34;&gt;神器传说&lt;/h1&gt;

&lt;p&gt;在猿的世界里，流传着两大神器的传说： 一个是神的编辑器Emacs，另一个是编辑器之神Vim。&lt;br /&gt;
追求独步天下的高手为了得到它驾驭它，在江湖里宣起了几十年的血雨腥风:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;有的把Emacs比作屠龙宝刀，Vim则是倚天剑， 有“武林至尊，宝刀屠龙，号令天下，莫敢不从，倚天不出，谁与争锋”之势。&lt;/li&gt;
&lt;li&gt;用Emacs的是海盗， 用Vim的是忍者。Emacs大而全， Vi小而快，Vi有两大模式：“命令模式”和“插入模式”，分别对应忍者的：“匿踪模式”和“战斗模式”；&lt;/li&gt;
&lt;li&gt;性子暴躁的喜欢vim，性格平缓的喜欢emacs，用vim能让你享受到敲击出噼里啪啦的肌肉快感， 而用emacs却能让心如止水、修心养性的感受。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;怎么样才能做到神在使用编辑器之神呢？&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;org68187ca&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;追寻编辑器的心路历程&#34;&gt;追寻编辑器的心路历程&lt;/h1&gt;
</description>
        </item>
        
        <item>
            <title>为什么老家得有房</title>
            <link>http://mospany.github.io/2019/10/14/go-home-build-house/</link>
            <pubDate>Mon, 14 Oct 2019 14:17:41 CST</pubDate>
            <author>Mospan</author>
            <guid>http://mospany.github.io/2019/10/14/go-home-build-house/</guid>
            <description>

&lt;p&gt;&lt;img src=&#34;http://blog.mospan.cn/post/img/2019/go-home-build-house/main.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;p&gt;很多农村人到城市里打工或工作，不怎么在农村老家住了，但还要在老家建一座新房，这是为什么呢？&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;orga367a76&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;老家才是永远的根&#34;&gt;老家才是永远的根&lt;/h1&gt;

&lt;p&gt;无论在哪里谋生，只要老家的房子还在，那就还有一条退路，还有一个寄托。如果老家的房子都没有了，那就像无根浮萍，灵魂永远没有寄托。&lt;br /&gt;
虽然人可以搬进城里，但是亲情搬不走，只要老家的房子还在，隔三差五的回去看看，这个家就还是一个完整的家，一个团聚的家。房子没了，家也散了，亲情也淡了，那是花多少钱也弥补不回来的。&lt;br /&gt;
很多现在在外打拼的人，以后还是要回到农村养老的,回到乡下老家，养养鸡、种种菜、钓钓鱼，平日里喝点小酒、打点小牌，生命是从这里开始的，再从这里结束。&lt;/p&gt;

&lt;p&gt;对于大多数农村出来的人来说，外面的房子，只是一个住所，老家的房子，才是真正的家。&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;orgb73086d&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;最好吃的永远是家乡菜&#34;&gt;最好吃的永远是家乡菜&lt;/h1&gt;

&lt;p&gt;&lt;a id=&#34;org87e2a8a&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;在城市里只有工作没有生活&#34;&gt;在城市里只有工作没有生活&lt;/h1&gt;

&lt;p&gt;&lt;a id=&#34;org51360fb&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;蜗居在城市向往着豪宅&#34;&gt;蜗居在城市向往着豪宅&lt;/h1&gt;

&lt;p&gt;&lt;a id=&#34;org4168492&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;美好的回忆很多都在儿时的老家&#34;&gt;美好的回忆很多都在儿时的老家&lt;/h1&gt;

&lt;p&gt;&lt;a id=&#34;org6df280d&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;返璞归真-回归田园风光&#34;&gt;返璞归真，回归田园风光&lt;/h1&gt;

&lt;p&gt;&lt;a id=&#34;orgc371da2&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;新农村建设越来越好&#34;&gt;新农村建设越来越好&lt;/h1&gt;

&lt;p&gt;&lt;a id=&#34;org8f4993c&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;现在不盖房以后回不去了&#34;&gt;现在不盖房以后回不去了&lt;/h1&gt;
</description>
        </item>
        
        <item>
            <title>又见春哥，OR沙龙现场记实</title>
            <link>http://mospany.github.io/2019/08/11/openresty-salon-site-record/</link>
            <pubDate>Sun, 11 Aug 2019 05:54:34 CST</pubDate>
            <author>Mospan</author>
            <guid>http://mospany.github.io/2019/08/11/openresty-salon-site-record/</guid>
            <description>

&lt;p&gt;&lt;img src=&#34;http://blog.mospan.cn/post/img/2019/openresty-salon/main.jpeg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;orgbe7fbb9&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;引言&#34;&gt;引言&lt;/h1&gt;

&lt;p&gt;第一次见到春哥本尊(活体)是在2015年是在360举行的openresty大会，历经4年再次在北京现场感受春哥技术热情与现场号召力，即使收了99元门票费现场200个座位座无虚席， 就像开个人演唱会一样，一个人演讲一下午非常辛苦，没有人提前离开，可见春哥在技术圈的影响力。这么说吧， 在中国认为最能拿得出手的开源项目就两个，一个是章文嵩博士开启现在比较稳定变化不大的&lt;a href=&#34;http://zh.linuxvirtualserver.org/&#34;&gt;LVS&lt;/a&gt;项目， 另外一个是章亦春发起在全球广泛使用还在蓬勃发展的&lt;a href=&#34;https://openresty.org/cn/&#34;&gt;openresty&lt;/a&gt;项目，可以说双章把中国开源技术带到世界先进水平。
这次大会春哥认真准备了4份PPT，现场演示了很多技巧，亮点多多，我个人认为最大的亮点有：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;动态追踪技术&lt;/li&gt;
&lt;li&gt;各种小语言及周边库建设&lt;/li&gt;
&lt;li&gt;编程与禅修&lt;/li&gt;
&lt;li&gt;&amp;#x2026;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;免责声明&lt;/strong&gt;
如下为本人记录本次技术沙龙部分精要和个人理解，如有错误之处，欢迎指正。&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;orge0a96ba&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;会议流程&#34;&gt;会议流程&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Openresty北京技术沙龙&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;时间：8 月 10 日（周六）13:30-19:00&lt;/li&gt;
&lt;li&gt;地点：北京丽都皇冠假日酒店（北京朝阳区将台路6号）酒店二层宴会厅A&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.mospan.cn/post/img/2019/openresty-salon/meeting.jpeg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;org731738c&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;部分精要&#34;&gt;部分精要&lt;/h1&gt;

&lt;p&gt;&lt;a id=&#34;orgae2f336&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;应用开发&#34;&gt;应用开发&lt;/h2&gt;

&lt;p&gt;基于Openresty开发应用的优势：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;小巧&lt;/strong&gt;: lua作为嵌入式脚本放在openresty和游戏中开发很小巧&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高效&lt;/strong&gt;: lua开发非常高效，比用C开发nginx模块要高效很多，入门门槛也低。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;成熟稳定&lt;/strong&gt;: 已经大规模广泛商业应用，尤其现在CDN行业基本都用openresty作为前端。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;全动态&lt;/strong&gt;: 可以通过edge语言生成不用重启即可生效，程序既数据，数据既程序。&lt;/li&gt;
&lt;li&gt;&amp;#x2026;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.mospan.cn/post/img/2019/openresty-salon/compare-go.jpeg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;org6d60254&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;应用场景&#34;&gt;应用场景&lt;/h2&gt;

&lt;p&gt;刚开始写openresty主要是想通过它来做一个完整的blog，包含前后端的webserver，目前openresty做着做着发现在CDN领域应该广泛，它主要应用场景:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;命令行应用(编译器、系统编程工具、测试工具)&lt;/li&gt;
&lt;li&gt;网关类型应用(API、负载均衡、CDN等)&lt;/li&gt;
&lt;li&gt;Web应用(连接数据库、memcached、redis等等)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a id=&#34;orga82b642&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;测试驱动&#34;&gt;测试驱动&lt;/h3&gt;

&lt;p&gt;现在主要通过测试驱动学习、测试驱动开发方法，早期主要抄书，通过肌肉记忆，当抄到一大半时候不懂的慢慢就懂了，看似抄书节奏放慢其实可以更好的理解，书读百遍其义自现。早期抄书有些时候主要是书都是借的，不抄的话以后就看不到了，还透露有些书废寝忘食的抄完后，朋友看自己那么喜欢这本书就说这本书就送给你吧，自己哭笑不得，白抄那么累了。&lt;/p&gt;

&lt;p&gt;自己怎么在两三月内精通nginx核心会开发C模块，一边抄代码一边通过&lt;a href=&#34;https://metacpan.org/pod/Test:Nginx&#34;&gt;Test:Nginx&lt;/a&gt;测试驱动学习开发。它的第一个nginx开源项目&lt;a href=&#34;https://github.com/openresty/echo-nginx-module&#34;&gt;echo-nginx-module&lt;/a&gt;是这样完成的，即使现在还是很多人学习入手nginx的基础, nginx echo模块是在nginx程序上扩展了echo输出字符的功能, 对于调试很方便。&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;orgb810c07&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;resty-cli&#34;&gt;Resty CLI&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;resty -e &#39;ngx.(&amp;quot;hello,world!&amp;quot;)

restydoc ngx.pipe

restydoc -s content_by_lua
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a id=&#34;orge6eaafd&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;resty&#34;&gt;resty&lt;/h3&gt;

&lt;p&gt;resty-cli - OpenResty的高级命令行实用程序，可以像使用 lua 或者 luajit 命令行工具一样直接从命令行运行 resty 命令行实用程序来运行openresty脚本。 它可以使用 OpenResty Lua创建各种命令行实用程序， 现场演示了下该命令与其他语言如python、perl、nodejs等性能对比，都优于python、nodejs。&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;orgebad122&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;restydoc&#34;&gt;restydoc&lt;/h3&gt;

&lt;p&gt;OpenResty 附带了非常完善的用户参考手册 restydoc，提供与 UNIX 手册 man 相同的功能，可以检索 OpenResty 里所有组件的帮助文档，包括但不限于：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OpenResty 各个组件的介绍和用法；&lt;/li&gt;
&lt;li&gt;OpenResty 指令和功能接口的用法；&lt;/li&gt;
&lt;li&gt;Nginx 介绍、用法、基本工作原理；&lt;/li&gt;
&lt;li&gt;Lua/LuaJIT 语法要素。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a id=&#34;org85f1347&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;调试与调优&#34;&gt;调试与调优&lt;/h2&gt;

&lt;p&gt;通过打印日志可以解决大部分的问题，通过动态追踪可以解决高层次的问题。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;打印日志&lt;/li&gt;
&lt;li&gt;测试驱动&lt;/li&gt;
&lt;li&gt;动态追踪(火焰图、SystemTap、GDB、OpenResty Trace)&lt;/li&gt;
&lt;li&gt;Openresty Cloud&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a id=&#34;orgac11789&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;如何编写高效的lua代码&#34;&gt;如何编写高效的Lua代码&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;避免或减少在热代码路径上创建GC对象(string、table、function)&lt;/li&gt;
&lt;li&gt;lua-tablepool&lt;/li&gt;
&lt;li&gt;避免闭包&lt;/li&gt;
&lt;li&gt;尽量使用Lua模块&lt;/li&gt;
&lt;li&gt;拼接字符串的正确做法&lt;/li&gt;
&lt;li&gt;让热代码路径被JIT编译&lt;/li&gt;
&lt;li&gt;自动优化的可能性(lux编译器)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a id=&#34;orgfb483ca&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;更多的开源教程与演示视频&#34;&gt;更多的开源教程与演示视频&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;blog.openresty.com&lt;/li&gt;
&lt;li&gt;youtube/bilibili&lt;/li&gt;
&lt;li&gt;由Openresty Showman批量制作&lt;/li&gt;
&lt;li&gt;由Openresty Trace展示软件内部真实细节&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a id=&#34;orgbff1b17&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;怎样阅读openresty源码&#34;&gt;怎样阅读openresty源码&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Nginx核心&lt;/li&gt;
&lt;li&gt;LuaJit核心&lt;/li&gt;
&lt;li&gt;ngx_http_lua等模块&lt;/li&gt;
&lt;li&gt;lua-resty-*标准库&lt;/li&gt;
&lt;li&gt;按需阅读，只读核心代码路径&lt;/li&gt;
&lt;li&gt;学习代码风格规范: &lt;a href=&#34;https://openresty.org/en/c-coding-style-guide.html&#34;&gt;https://openresty.org/en/c-coding-style-guide.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a id=&#34;org05de733&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;核心开发&#34;&gt;核心开发&lt;/h1&gt;

&lt;p&gt;核心开发主要讲解主题如下，由于没有完全听懂先列出主题，以后再分解。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Openresty核心结构&lt;/li&gt;
&lt;li&gt;luajit内部实现结构&lt;/li&gt;
&lt;li&gt;全新的基于luajit ffi的Lua API实现&lt;/li&gt;
&lt;li&gt;全新的ngx_meta_lua模块&lt;/li&gt;
&lt;li&gt;Test:Nginx测试台&lt;/li&gt;
&lt;li&gt;valgrind测试模式&lt;/li&gt;
&lt;li&gt;mockeagain测试模式&lt;/li&gt;
&lt;li&gt;memcheck模式&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.mospan.cn/post/img/2019/openresty-salon/test-nginx.jpeg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;orgfac76d2&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;小语言与周边建设&#34;&gt;小语言与周边建设&lt;/h1&gt;

&lt;p&gt;春哥曾经说过要学习好技术，主要是：英语、数学、计算机科学，我个人认为计算机科学里最主要的是计算机操作系统、算法、编译原理，曾经有个老师说如何衡量你对某个语言的理解程度，就看你是否自己写出其编译器，再用自己写的编译器与官方编译器对比，就是你对这个语言的理解程度，到目前为止个人还没写过编译器表示汗颜。 他本次分享自己写的小语言如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OpsLang: 更高效更智能的自动化运维语言&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;OpsLang 快速上手
&lt;a href=&#34;https://doc.openresty.com.cn/zh/opslang/&#34;&gt;https://doc.openresty.com.cn/zh/opslang/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.mospan.cn/post/img/2019/openresty-salon/opslang.jpeg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;edgelang: 更加接近自然语言，使用更短的语句可翻译生成lua代码&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Edge 语言用户手册
&lt;a href=&#34;https://doc.openresty.com.cn/zh/edgelang/&#34;&gt;https://doc.openresty.com.cn/zh/edgelang/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.mospan.cn/post/img/2019/openresty-salon/edgelang.jpeg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;fanlang: 类似DSL基于Perl 6语言的语法设计&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;fanlang 用户手册
&lt;a href=&#34;https://doc.openresty.com.cn/en/fanlang/&#34;&gt;https://doc.openresty.com.cn/en/fanlang/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.mospan.cn/post/img/2019/openresty-salon/fanlang.jpeg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ylang:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ylang 用户手册
&lt;a href=&#34;https://doc.openresty.com.cn/en/ylang/&#34;&gt;https://doc.openresty.com.cn/en/ylang/&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ylua:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ylua 用户手册
&lt;a href=&#34;https://doc.openresty.com.cn/en/ylua/&#34;&gt;https://doc.openresty.com.cn/en/ylua/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;orgb9642fe&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;动态追踪&#34;&gt;动态追踪&lt;/h1&gt;

&lt;p&gt;动态追踪技术是一种不用停机停程序、不用修改当前代码情况下的一种调试调优技术，它的一般原理如下：
&lt;img src=&#34;http://blog.mospan.cn/post/img/2019/openresty-salon/dtrace.jpeg&#34; alt=&#34;img&#34; /&gt;
他还现场演示了如何使用动态追踪技术观察程序内部真实细节和不改代码加入探针调试，大致原理是把各种语言都编译成ylang中间语言进行调试。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.mospan.cn/post/img/2019/openresty-salon/dtrace-stats.jpeg&#34; alt=&#34;img&#34; /&gt;
&lt;img src=&#34;http://blog.mospan.cn/post/img/2019/openresty-salon/dtrace-lua.jpeg&#34; alt=&#34;img&#34; /&gt;
&lt;img src=&#34;http://blog.mospan.cn/post/img/2019/openresty-salon/dtrace-c.jpeg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;p&gt;动态追踪技术详见春哥写的：&lt;a href=&#34;https://openresty.org/posts/dynamic-tracing/&#34;&gt;动态追踪技术漫谈&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;orgf244bdd&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;编程与禅修&#34;&gt;编程与禅修&lt;/h1&gt;

&lt;p&gt;技术的尽头是宗教，炒币的尽头是嫩模，编程就像学习各种武功，当武功越高毒素越多，需要像佛法之类的心法来综合，一个修外一个修内，武功越高需要的佛法也越高，否则会走火入魔的。&lt;/p&gt;

&lt;p&gt;人们通常说的四禅八定，属于修世间禅的层次和境界。世间禅的禅定层次恰好与三界层次一样，三界是欲界、色界、无色界。世间禅中，欲界中的定有欲界定、未到地定两种。佛家认为，这两种所谓的定，不能算是真正的人定，只是达到身心初步的轻安，为进人四禅八定作准备而已。四禅八定指初禅、二禅、三禅、四禅及空无边处定、识无边处定、无所有处定、非想非非想处定八种依次升进的坐禅人定层次和境界。坐禅者人定，如果依次达到初禅、二禅、三禅、四禅四种境界，就能自然达到脱离欲界众生共同具有的饮食男女之欲，但心念中仍有固定形态的物质身体存在，故名色界四禅。坐禅者如果修过色界四禅，再依次人空无边处定、识无边处定、无所有处定、非想非非想处定四种定者，修持者意识中已没有物质身体的存在，故名无色界四定，也叫四空定。&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;org25b3296&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;推荐书&#34;&gt;推荐书&lt;/h1&gt;

&lt;p&gt;春哥在会上唯一推荐的书是《&lt;a href=&#34;https://item.jd.com/43659041937.html&#34;&gt;The Practice of Programming&lt;/a&gt;》, 对应的中文版为《&lt;a href=&#34;https://item.jd.com/31648488755.html&#34;&gt;程序设计实践&lt;/a&gt;》,建议读英文版本，春哥说这本书读了很多年很多次，每次读都有新的体会新的收获。&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;org3beb885&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;小结&#34;&gt;小结&lt;/h1&gt;

&lt;p&gt;一入技术深似海(可能还没入门), 同样是80后人与人差距啥这么大呢，有些时候感觉人与人之间的差距甚至大于人与动物之间的差距，路漫漫其修远兮，吾将上下而求索。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>IPv6时代已来，您Get了多少？</title>
            <link>http://mospany.github.io/2019/08/09/ipv6-base/</link>
            <pubDate>Fri, 09 Aug 2019 17:14:27 CST</pubDate>
            <author>Mospan</author>
            <guid>http://mospany.github.io/2019/08/09/ipv6-base/</guid>
            <description>

&lt;p&gt;&lt;img src=&#34;http://blog.mospan.cn/post/img/2019/ipv6-base/ipv6-main.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;org64c0c7c&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;为什么要用ipv6&#34;&gt;为什么要用IPv6&lt;/h1&gt;

&lt;p&gt;如今互联网主要使用IPv4, 感觉已经蓬勃发展了够用了，那为什么还需要使用IPv6呢？主要有如下原因：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;IPv4地址匮乏&lt;/li&gt;
&lt;li&gt;NAT非根本解决办法，破坏了端到端模型&lt;/li&gt;
&lt;li&gt;新技术对IP协议催生了更多的需求&lt;/li&gt;
&lt;li&gt;政策驱动: 计划使用5-10年的时间建成全球最大的IPv6商用网络。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;随着5G、IOT万物互联的到来，IPv4已经不方便或不能承载如此大的需求了，更多的应用呼吁着IPv6尽快落地。&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;orgfda1432&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;ipv6优势&#34;&gt;IPv6优势&lt;/h1&gt;

&lt;p&gt;既然IPv4有以上不足，那IPv6有什么优势呢？主要如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;近乎无限的地址空间&lt;/li&gt;
&lt;li&gt;更简洁的报文头部&lt;/li&gt;
&lt;li&gt;内置的安全性&lt;/li&gt;
&lt;li&gt;更好的QoS支持&lt;/li&gt;
&lt;li&gt;更好的移动性&lt;/li&gt;
&lt;li&gt;编址层次等级&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a id=&#34;orgd14bab5&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;ipv6技术&#34;&gt;IPv6技术&lt;/h1&gt;

&lt;p&gt;&lt;a id=&#34;orgf199107&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;标准-rfc&#34;&gt;标准(RFC)&lt;/h2&gt;

&lt;p&gt;IPv6协议由很多RFC组成，IPv6协议族RFC如下， 其中&lt;br /&gt;
&lt;img src=&#34;http://blog.mospan.cn/post/img/2019/ipv6-base/ipv6-rfc.png&#34; alt=&#34;img&#34; /&gt;&lt;br /&gt;
RFC5942 - IPv6子网模式：链路和子网前缀间的关系&lt;br /&gt;
RFC5569 - IPv4/IPv6过渡技术之—— 6rd&lt;br /&gt;
RFC3056 - IPv4/IPv6过渡技术之—— 6to4&lt;br /&gt;
RFC2473 - IPv6标准中的通用分组隧道化&lt;br /&gt;
RFC6333 - IPv4/IPv6过渡技术之——双栈精简版&lt;br /&gt;
RFC5214 - IPv4/IPv6过渡技术之——ISATAP&lt;br /&gt;
RFC4213 - IPv6主机和路由器的基本转换机制-双栈和隧&lt;br /&gt;
RFC3775 - IPv6中的移动性支持&lt;br /&gt;
RFC3053 - IPv4/IPv6过渡技术之——隧道代理&lt;br /&gt;
RFC6434 - 对IPv6节点的要求&lt;br /&gt;
RFC4294 - 对IPv6节点的要求&lt;br /&gt;
RFC4294 - IPv6的默认地址选择&lt;br /&gt;
RFC6071 - IP安全(IPsec)&lt;br /&gt;
RFC5340 - IPv6的动态路由协议OSPFv3&lt;br /&gt;
RFC3315 - DHCPv6&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;org2a08aaa&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;报文格式&#34;&gt;报文格式&lt;/h2&gt;

&lt;p&gt;IPv6报文格式与IPv4有一定相似，但比它简化和固定了好多，这样更容易解析与传输。&lt;br /&gt;
&lt;img src=&#34;http://blog.mospan.cn/post/img/2019/ipv6-base/ipv6-header.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;org8d4e87c&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;地址&#34;&gt;地址&lt;/h2&gt;

&lt;p&gt;巨大的地址空间, 相当于地球上每粒沙子都有自己的地址。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IPv4&lt;/strong&gt;&lt;br /&gt;
地址长度：32位&lt;br /&gt;
地址空间：2的32次方，约42亿(世界上平均3个人有2个IP地址)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IPv6&lt;/strong&gt;&lt;br /&gt;
地址长度：128位&lt;br /&gt;
地址空间：2的128次方，约3.4 x 10^38个(地球上的每一粒沙子都有IP地址)&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;orgdc9712e&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;表示&#34;&gt;表示&lt;/h3&gt;

&lt;p&gt;非压缩： 2001:0da8:0207:0000:0000:0000:8207&lt;br /&gt;
  压缩前导0：2001:0da8:0207:0:0:0:0:8207&lt;br /&gt;
  压缩: 2001:0d08:0207::8207     注：只能有一个::&lt;br /&gt;
  内嵌IPv4地址： ::192.168.1.1&lt;br /&gt;
&lt;img src=&#34;http://blog.mospan.cn/post/img/2019/ipv6-base/ipv6-addr.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;orgb488b46&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;分类&#34;&gt;分类&lt;/h3&gt;

&lt;p&gt;IPv6也分单播、组播，但没有了广播，增加了任播anycast，它允许同一个IP配置在多台服务器上，通过路由的方式自动访问离用户的最近的服务器上去。&lt;br /&gt;
&lt;img src=&#34;http://blog.mospan.cn/post/img/2019/ipv6-base/addr-type.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;org5489189&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;手工配置&#34;&gt;手工配置&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;添加IPv6地址&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ip -6 addr add &amp;lt;ipv6address&amp;gt;/&amp;lt;prefixlength&amp;gt; dev &amp;lt;interface&amp;gt;

ip -6 addr add 2001::1/64 dev eth0

ifconfig &amp;lt;interface&amp;gt; inet6 add &amp;lt;ipv6address&amp;gt;/&amp;lt;prefixlength&amp;gt; 

ifconfig eth0 inet6 add 2001::1/64
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;添加默认路由&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ip -6 route add &amp;lt;ipv6address&amp;gt;/&amp;lt;prefixlength&amp;gt; via &amp;lt;ipv6address&amp;gt;

ip -6 route add default via 2001::1 

route -A inet6 add &amp;lt;ipv6address&amp;gt;/&amp;lt;prefixlength&amp;gt; gw

route -A inet6 add default gw 2001::1 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;查看路由&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ip -6 route show

route -6
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a id=&#34;org956a030&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;无状态配置&#34;&gt;无状态配置&lt;/h3&gt;

&lt;p&gt;IPv6的无状态配置是比较吸引我的一个特点，只要路由器支持插上网线就自动分配到全球唯一的地址就能自动联网。&lt;br /&gt;
&lt;img src=&#34;http://blog.mospan.cn/post/img/2019/ipv6-base/auto-1.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.mospan.cn/post/img/2019/ipv6-base/auto-2.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;orge70663c&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;常用命令&#34;&gt;常用命令&lt;/h2&gt;

&lt;p&gt;&lt;a id=&#34;orgfd8171c&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;查看ip&#34;&gt;查看ip&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;ip -6 addr 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a id=&#34;orga991404&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;查看路由&#34;&gt;查看路由&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;ip -6 route
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a id=&#34;orgf2c7e21&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;查看多播地址&#34;&gt;查看多播地址&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;ip -6 maddr
netstat -gn
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a id=&#34;org04efb87&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;查看dns-aaaa记录-走ipv4路线&#34;&gt;查看dns AAAA记录(走IPv4路线)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;dig -t AAAA www.xxx.com
nslookup -query=AAAA www.xxx.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a id=&#34;orgbaf5477&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;查看dns-aaaa记录-走ipv6路线&#34;&gt;查看dns AAAA记录(走IPv6路线)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;dig @2001::1 -6 -t AAAA www.xxx.com
nslookup -query=AAAA www.xxx.com 2001::1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a id=&#34;orgdb01478&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;查看dns-aaaa记录-走ipv6路线-最完整-最靠谱的办法&#34;&gt;查看dns AAAA记录(走IPv6路线, 最完整，最靠谱的办法)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;dig @2001::1 -6 -t AAAA www.xxx.com +trace
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a id=&#34;orgb5ed7a7&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;curl&#34;&gt;curl&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;curl -6 https://www.xxx.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a id=&#34;orgd4f50fc&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;ping&#34;&gt;ping&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;ping6 www.xxx.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a id=&#34;orgfe8a668&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;trace-route&#34;&gt;trace route&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;mtr -6 www.xxx.com
traceroute6 www.xxx.com 
tracert6 www.xxx.com 
tracepath6 www.xxx.com 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a id=&#34;org5f9751c&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;ping-1&#34;&gt;ping&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;ping6 www.xxx.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a id=&#34;orgc80feba&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;邻居地址解析-类似ipv4中的arping&#34;&gt;邻居地址解析，类似IPv4中的arping&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;ndisc6 -n 2001::1 eth0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a id=&#34;org631a50c&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;iptables&#34;&gt;iptables&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;ip6tables-save
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a id=&#34;orgfd17b8c&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;tcpdump&#34;&gt;tcpdump&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;tcpdump -nnn -i eth0 ip6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a id=&#34;org46e39eb&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;在线工具&#34;&gt;在线工具&lt;/h2&gt;

&lt;p&gt;&lt;a id=&#34;org6ac0034&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;公共dns列列表&#34;&gt;公共dns列列表&lt;/h3&gt;

&lt;p&gt;地址: &lt;a href=&#34;http://dns.icoa.cn/ipv6/&#34;&gt;http://dns.icoa.cn/ipv6/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;org49d22ec&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;查询-网站是否提供ipv6&#34;&gt;查询⽹网站是否提供IPv6&lt;/h3&gt;

&lt;p&gt;地址:&lt;br /&gt;
&lt;a href=&#34;https://ready.chair6.net/&#34;&gt;https://ready.chair6.net/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://ip6tools.com/#checkWebServer&#34;&gt;http://ip6tools.com/#checkWebServer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;org91f5e2c&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;查询我-自-己是否拥有公-网ipv6地址&#34;&gt;查询我⾃自⼰己是否拥有公⽹网IPv6地址&lt;/h3&gt;

&lt;p&gt;地址：&lt;br /&gt;
&lt;a href=&#34;http://www.test-ipv6.com&#34;&gt;http://www.test-ipv6.com&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://ip6tools.com/#WhatisMyIPv6Address&#34;&gt;http://ip6tools.com/#WhatisMyIPv6Address&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;org6e6f575&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;协议栈&#34;&gt;协议栈&lt;/h2&gt;

&lt;p&gt;IPv6与IPv4协议栈比较相似，经过精心设计后去掉了不少冗余或不合理部分，代码部分将近少了一半，使得更加简洁强大。&lt;br /&gt;
&lt;img src=&#34;http://blog.mospan.cn/post/img/2019/ipv6-base/ipv6-stack.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;org7b102ac&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;现状&#34;&gt;现状&lt;/h1&gt;

&lt;p&gt;IPv6目前用户覆盖率还不高，尤其是中国, 主要原因是钱，运营商通过维护或改造现有IPv4网络基本满足了目前大家的使用要求，在没有其他利益或政策驱动下很难主动自己贴钱去升级网络，再者需要大家都升级后才能完全使用，谁不愿意劳民伤财的去干这件事。但随着中国想努力引领世界，在政策与应用驱动下IPv6将大大加快。&lt;br /&gt;
&lt;img src=&#34;http://blog.mospan.cn/post/img/2019/ipv6-base/ipv6-now.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;orgc6aa769&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;过渡技术&#34;&gt;过渡技术&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.mospan.cn/post/img/2019/ipv6-base/ipv6-transit.png&#34; alt=&#34;img&#34; /&gt;&lt;br /&gt;
过渡技术主要解决IPv4和IPv6网络共存情况下的互联互通，主要由三种策略：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;双栈协议：设备升级到IPv6同时保留IPv4支持，应用程序可以选择使用IPv4或IPv6; 协议应用允许应用逐渐从IPv4过渡到IPv6。&lt;/li&gt;
&lt;li&gt;隧道封装：IPv6报文作为IPv4的载荷，或由MPLS承载在IPv4 internet海洋中连接多个IPv6孤岛&lt;/li&gt;
&lt;li&gt;协议转换：提供IPv4和IPv6的互通动作，如NAT-PT等提供IPv6与IPv4互相访问的技术，适用于IPv6 internet与IPv4 internet共存，而两者又需要互相通讯的需求。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a id=&#34;orgecddc15&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;双栈协议&#34;&gt;双栈协议&lt;/h2&gt;

&lt;p&gt;设备升级到IPv6的同时保留IPv4支持，应用程序可以选择使用IPv6或IPv4协议。&lt;br /&gt;
所有的过渡技术都是基于双协议栈实现的。&lt;br /&gt;
优点：互通性好、易于理解、实现简单。&lt;br /&gt;
缺点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;对每个IPv4节点都要升级，成本较大，没有解决IPv4地址紧缺的问题。&lt;/li&gt;
&lt;li&gt;部署复杂，所有设备都同时配置IPv4和IPv6；&lt;/li&gt;
&lt;li&gt;对设备性能要求高，既要运行IPv6，又要运行IPv4。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a id=&#34;org011bb58&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;隧道封装&#34;&gt;隧道封装&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;IPv6 over IPv4 手动隧道(配置隧道)：隧道两端的边界路由器上通过静态指定隧道的源IPv4地址和目的IPv4地址而创建的隧道。&lt;/li&gt;
&lt;li&gt;IPv6 over IPv4 GRE隧道(GRE隧道)： 使用IPv4的GRE隧道上承载IPv6流而实现IPv6互通。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a id=&#34;org5571ac2&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;展望&#34;&gt;展望&lt;/h1&gt;

&lt;p&gt;随着IPv6的普及与更多的应用落地， 使得人与人、物与物之间通信更加频繁，将催生出很多革命创新型应用或巨头公司，谁主沉浮，让我们拭目以待吧。&lt;br /&gt;
&lt;img src=&#34;http://blog.mospan.cn/post/img/2019/ipv6-base/ipv6-preview.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>IPv6技术概览(PDF版)</title>
            <link>http://mospany.github.io/2019/08/02/ipv6-base/</link>
            <pubDate>Fri, 02 Aug 2019 07:39:07 CST</pubDate>
            <author>Mospan</author>
            <guid>http://mospany.github.io/2019/08/02/ipv6-base/</guid>
            <description>

&lt;h1 id=&#34;描述&#34;&gt;描述&lt;/h1&gt;

&lt;p&gt;此《IPv6技术概览》PPT内容由我个人的理解编写与部分来自互联网上的整理, 以便更多的读者分享交流。&lt;/p&gt;

&lt;h1 id=&#34;ppt内容&#34;&gt;PPT内容&lt;/h1&gt;

&lt;p&gt;&lt;center&gt;&lt;embed src=&#34;http://blog.mospan.cn/post/img/ipv6-base.pdf&#34; width=100% height=&#34;800&#34;&gt;&lt;/center&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>我的博客Hugo使用手册</title>
            <link>http://mospany.github.io/2019/02/02/mospan-hugo-blog-manual/</link>
            <pubDate>Sat, 02 Feb 2019 15:18:53 CST</pubDate>
            <author>Mospan</author>
            <guid>http://mospany.github.io/2019/02/02/mospan-hugo-blog-manual/</guid>
            <description>&lt;h1 id=&#34;hugo&#34;&gt;Hugo&lt;/h1&gt;

&lt;p&gt;Hugo是一个用Go语言编写的静态网站生成器，它使用起来非常简单，相对于Jekyll复杂的安装设置来说，Hugo仅需要一个二进制文件hugo(hugo.exe)即可轻松用于本地调试和生成静态页面。&lt;/p&gt;

&lt;p&gt;Hugo生成静态页面的效率很高，我的多篇博客文章生成几乎是瞬间完成的，而用Jekyll需要等待10秒左右。&lt;/p&gt;

&lt;p&gt;Hugo自带watch的调试模式，可以在我修改MarkDown文章之后切换到浏览器，页面会检测到更新并且自动刷新，呈现出最终效果，能极大的提高博客书写效率。再加上Hugo是使用Go语言编写，已经没有任何理由不使用Hugo来代替Jekyll作为我的个人博客站点生成器了。&lt;/p&gt;

&lt;h1 id=&#34;usage&#34;&gt;Usage&lt;/h1&gt;

&lt;p&gt;Demo：
&lt;a href=&#34;http://blog.mospan.cn/&#34; title=&#34;http://blog.mospan.cn/&#34;&gt;http://blog.mospan.cn/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;界面参考 [http://cyrillschumacher.com/](http://cyrillschumacher.com/) 做了一些修改，并做了一个皮肤：panman。&lt;/p&gt;

&lt;h2 id=&#34;源码&#34;&gt;源码&lt;/h2&gt;

&lt;p&gt;下载源码到本地。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone git@github.com:mospany/mospan-hugo-blog.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;记得把我的个人信息修改成自己的就行。&lt;/p&gt;

&lt;h2 id=&#34;启动调试&#34;&gt;启动调试&lt;/h2&gt;

&lt;h3 id=&#34;本地调试&#34;&gt;本地调试&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd mospan-hugo-blog
$ ./debug.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;打开浏览器：http://localhost:1313&lt;/p&gt;

&lt;h3 id=&#34;远程调试&#34;&gt;远程调试&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd mospan-hugo-blog
$ ./debug.py AA.BB.CC.DD
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;打开浏览器：http://AA.BB.CC.DD:1313
其中： AA.BB.CC.DD 为本机可访问IP地址。&lt;/p&gt;

&lt;h2 id=&#34;创作&#34;&gt;创作&lt;/h2&gt;

&lt;ul&gt;
现在的hugo可支持markdown与org-mode文件格式，分别对应create-md.py于create-org.py脚本。
&lt;li&gt;执行create-md.py或create-org.py。&lt;/li&gt;
&lt;li&gt;输入文件标题，最后不要有空格。&lt;/li&gt;
&lt;li&gt;它将根据themes/hugo-panman-theme/archetypes/default.[md|org]模板生成以日期+标题的文件。&lt;/li&gt;
&lt;li&gt;打开新生成文件进行编辑，记得修改头部的categories、keywords、tags、title进行归类区分。&lt;/li&gt;
&lt;li&gt;修改好后，通过push.py进行保存到github文件中。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;部署&#34;&gt;部署&lt;/h2&gt;

&lt;p&gt;如果是第一次部署，执行：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ./deploy.py first
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;否则&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ./deploy.py manual
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;即可&lt;/p&gt;

&lt;h1 id=&#34;改进记录&#34;&gt;改进记录&lt;/h1&gt;

&lt;h1 id=&#34;缺陷&#34;&gt;缺陷&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Hugo对org-mode渲染没有markdown好。&lt;/li&gt;
&lt;li&gt;文章标题还需更加美化。&lt;/li&gt;
&lt;li&gt;右边的导航栏在某些浏览器下点击无效。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;

&lt;p&gt;【01】 &lt;a href=&#34;https://www.jianshu.com/p/57afa4844aaa&#34; title=&#34;Gitment评论功能接入踩坑教程&#34;&gt;Gitment评论功能接入踩坑教程&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;【02】 &lt;a href=&#34;https://www.qikqiak.com/post/hugo-integrated-gitment-plugin/&#34; title=&#34;Hugo 集成 Gitment 评论插件&#34;&gt;Hugo 集成 Gitment 评论插件&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;【03】&lt;a href=&#34;https://blog.csdn.net/wardseptember/article/details/82828391&#34; title=&#34;解决gitment无法登陆评论问题（Object ProgressEvent）&#34;&gt;解决gitment无法登陆评论问题（Object ProgressEvent）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;【04】&lt;a href=&#34;https://www.xianmin.org/post/utterances-comment-system/&#34; title=&#34;更好的基于 github issues 的评论系统——utterances&#34;&gt;更好的基于 github issues 的评论系统——utterances&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>VUE开发环境搭建</title>
            <link>http://mospany.github.io/2018/02/24/vue-dev-env-build/</link>
            <pubDate>Sat, 24 Feb 2018 16:32:21 CST</pubDate>
            <author>Mospan</author>
            <guid>http://mospany.github.io/2018/02/24/vue-dev-env-build/</guid>
            <description>

&lt;h3 id=&#34;安装-a-id-sec-1-name-sec-1-a&#34;&gt;安装&lt;a id=&#34;sec-1&#34; name=&#34;sec-1&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;h4 id=&#34;安装nodejs-a-id-sec-1-1-name-sec-1-1-a&#34;&gt;安装nodejs&lt;a id=&#34;sec-1-1&#34; name=&#34;sec-1-1&#34;&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;到&lt;a href=&#34;https://nodejs.org/en/download/&#34;&gt;https://nodejs.org/en/download/&lt;/a&gt; 下载对应系统的二进制版本。&lt;/li&gt;
&lt;li&gt;按照&lt;a href=&#34;http://blog.csdn.net/mrzhouxiaofei/article/details/66974644&#34;&gt;ubuntu16.04下配置nodejs环境&lt;/a&gt;进行安装。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;安装npm-a-id-sec-1-2-name-sec-1-2-a&#34;&gt;安装npm&lt;a id=&#34;sec-1-2&#34; name=&#34;sec-1-2&#34;&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;创建npm依赖包文件package.json。&lt;/li&gt;

&lt;li&gt;&lt;p&gt;安装npm依赖&lt;/p&gt;

&lt;h1 id=&#34;install-dependencies&#34;&gt;install dependencies&lt;/h1&gt;

&lt;p&gt;npm install
npm install fec-builder -g&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果出现这个报错&amp;rdquo;Module build failed: Error: ENOENT: no such file or directory, scandir &amp;lsquo;/opt/node/lib/node_modules/fec-builder/node_modules/node-sass/vendor&amp;rsquo;&amp;ldquo;,
直接到/opt/node/lib/node_modules/fec-builder/node_modules/node-sass/目录下执行命令&amp;rdquo;npm rebuild node-sass&amp;rdquo;即可。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;启动-a-id-sec-2-name-sec-2-a&#34;&gt;启动&lt;a id=&#34;sec-2&#34; name=&#34;sec-2&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;创建fec-builder软连接：ln -s /opt/node/bin/fec-builder /usr/local/bin/fec-builder，
直接使用fec-builder命令启动。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# serve with hot reload at localhost:8080
fec-builder -p 8080

# build for production with minification
fec-builder build -e production
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;访问-a-id-sec-3-name-sec-3-a&#34;&gt;访问&lt;a id=&#34;sec-3&#34; name=&#34;sec-3&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;在浏览器地址栏中输入: &lt;a href=&#34;http://XX.XX.XX.XX:8080&#34;&gt;http://XX.XX.XX.XX:8080&lt;/a&gt; 进行访问。&lt;/p&gt;

&lt;h3 id=&#34;调试-a-id-sec-4-name-sec-4-a&#34;&gt;调试&lt;a id=&#34;sec-4&#34; name=&#34;sec-4&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;使用chrome开发者工具进行调试，详见：&lt;a href=&#34;https://www.jianshu.com/p/cf36d48652f4&#34;&gt;Chrome 开发者工具中文指南&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>emacs整体介绍</title>
            <link>http://mospany.github.io/2017/08/28/emacs-introduction/</link>
            <pubDate>Mon, 28 Aug 2017 07:39:07 CST</pubDate>
            <author>Mospan</author>
            <guid>http://mospany.github.io/2017/08/28/emacs-introduction/</guid>
            <description>

&lt;h1 id=&#34;描述&#34;&gt;描述&lt;/h1&gt;

&lt;p&gt;此PPT上描述的大部分功能是我折腾玩过的，现在整理分享出来以便有兴趣的读者对强大几乎无所不能的emacs有个大致的了解，让更多的人加入emacs大阵营中来。&lt;/p&gt;

&lt;h1 id=&#34;ppt内容&#34;&gt;PPT内容&lt;/h1&gt;

&lt;p&gt;&lt;center&gt;&lt;embed src=&#34;http://blog.mospan.cn/post/img/Emacs-introduction.pdf&#34; width=100% height=&#34;800&#34;&gt;&lt;/center&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>emacs.mospan使用指南</title>
            <link>http://mospany.github.io/2017/08/25/emacs-mospan-tutorial/</link>
            <pubDate>Sun, 27 Aug 2017 17:08:26 CST</pubDate>
            <author>Mospan</author>
            <guid>http://mospany.github.io/2017/08/25/emacs-mospan-tutorial/</guid>
            <description>

&lt;p&gt;&lt;a id=&#34;orgbd01d25&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;概述&#34;&gt;概述&lt;/h1&gt;

&lt;p&gt;我自从2011年开始使用自己折腾的emacs到现在，参考或实现了不少功能使其满足我工作与学习所需，虽然它依然有一些瑕疵，但尝试了其他配置或IDE之后依然觉得它是最符合我习惯的，
我一般用它来写Golang、C、Lua、Shell、GTD和Blog，基本已满足我所需和习惯。&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;org1543e0f&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;安装&#34;&gt;安装&lt;/h1&gt;

&lt;p&gt;emacs.mospan的Github地址为：&lt;a href=&#34;https://github.com/mospany/emacs.d&#34;&gt;https://github.com/mospany/emacs.d&lt;/a&gt;, 如果你的系统已装有Emacs，请先备份Emacs配置文件。因为Spacemacs的配置会覆盖掉原Emacs的配置文件。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~ 
mv .emacs.d .emacs.d.bak 
mv .emacs .emacs.bak
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你的系统没有安装Emacs，需要先安装Emacs，请注意Emacs版本至少为24.4。&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;org1db6571&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;安装emacs-mospan&#34;&gt;安装emacs.mospan&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a id=&#34;org0367a5e&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;安装依赖工具&#34;&gt;安装依赖工具&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Linux&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install pyflakes
sudo apt-get install cscope
sudo apt-get install w3m
sudo apt-get install &amp;quot;graphviz*&amp;quot; 
sudo apt-get install mew
sudo apt-get install ipython
sudo apt-get install stardict
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Mac&lt;/p&gt;

&lt;p&gt;把上面的apt-get换成brew即可。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a id=&#34;org1bfd30b&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;启动emacs-mospan&#34;&gt;启动emacs.mospan&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;emacs -mm 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;初次启动emacs.mospan会进行初始化配置（启动时会询问使用简、全哪套配置方案），安装依赖有可能需要一段时间。&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;org4edf2b3&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;使用&#34;&gt;使用&lt;/h1&gt;

&lt;p&gt;&lt;a id=&#34;orgad4aa7d&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;显示&#34;&gt;显示&lt;/h2&gt;

&lt;table border=&#34;2&#34; cellspacing=&#34;0&#34; cellpadding=&#34;6&#34; rules=&#34;groups&#34; frame=&#34;hsides&#34;&gt;


&lt;colgroup&gt;
&lt;col  class=&#34;org-left&#34; /&gt;

&lt;col  class=&#34;org-left&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-left&#34;&gt;快捷键&lt;/th&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-x C-=&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;放大字体&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-x C-–&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;缩小字体&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-x C-0&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;重置字体&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-c M-h&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;highlight-symbol-at-point&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-c M-r&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;highlight-symbol-remove-all&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-c M-n&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;highlight-symbol-next&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-c M-p&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;highlight-symbol-prev&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-x C-q&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;解除“buffer is read-only”&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a id=&#34;org2721feb&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;功能键&#34;&gt;功能键&lt;/h2&gt;

&lt;table border=&#34;2&#34; cellspacing=&#34;0&#34; cellpadding=&#34;6&#34; rules=&#34;groups&#34; frame=&#34;hsides&#34;&gt;


&lt;colgroup&gt;
&lt;col  class=&#34;org-left&#34; /&gt;

&lt;col  class=&#34;org-left&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-left&#34;&gt;快捷键&lt;/th&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;f3&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;open-eshell-other-buffer&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;f4&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;eshell&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;f12&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;svn-status&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-f9&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;ecb-activate&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;S-f9&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;ecb-deactivate&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-f10&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;imenu-list-smart-toggle&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-f10&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;sr-speedbar-toggle&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-f11&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;ediff&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;S-f11&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;ediff-directories&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-f12&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;man&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;f5&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;compile&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;f6&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;scope-find-functions-calling-this-function&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;f7&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;scope-pop-mark&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;f8&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;scope-find-global-definition-no-prompting&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-f6&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;gud-go&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-f7&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;gud-step&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-f8&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;gud-next&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a id=&#34;org088cc36&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;编辑&#34;&gt;编辑&lt;/h2&gt;

&lt;table border=&#34;2&#34; cellspacing=&#34;0&#34; cellpadding=&#34;6&#34; rules=&#34;groups&#34; frame=&#34;hsides&#34;&gt;


&lt;colgroup&gt;
&lt;col  class=&#34;org-left&#34; /&gt;

&lt;col  class=&#34;org-left&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-left&#34;&gt;快捷键&lt;/th&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-t&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;交换两个字符位置&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;M-t&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;交换两个单词位置&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-o&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;新建下一行&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-x C-t&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;交换两个文本行的位置&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;M-c&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;把单词的首字母改为大写&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;M-u&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;把单词的全部字母改为大写&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;M-l&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;把单词的全部字母改为小写&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-/&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;undo&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-.&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;redo&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-x j&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;跳到某一行&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-M-\\&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;格式化对齐(需先选中)&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-S n&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;向下移动5行&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-S p&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;向上移动5行&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-S f&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;向前移动5列&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-S b&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;向后移动5列&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-c d ?&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;查找当前鼠标点下的符号的文档&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-c d r&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;重新扫描tags文件&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-c d f&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;为函数插入Doxygen注释&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-c d i&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;为文件插入Doxygen注释&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-c d ;&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;为当前成员插入Doxygen注释&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-c d m&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;插入多行注释&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-c d s&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;插入单行注释&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-c d @&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;插入环绕当前区域的注释&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a id=&#34;orgf7d420e&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;编程&#34;&gt;编程&lt;/h2&gt;

&lt;p&gt;&lt;a id=&#34;org5361956&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;c&#34;&gt;C&lt;/h3&gt;

&lt;table border=&#34;2&#34; cellspacing=&#34;0&#34; cellpadding=&#34;6&#34; rules=&#34;groups&#34; frame=&#34;hsides&#34;&gt;


&lt;colgroup&gt;
&lt;col  class=&#34;org-left&#34; /&gt;

&lt;col  class=&#34;org-left&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-left&#34;&gt;快捷键&lt;/th&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-M-a&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;c-beginning-of-defun&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-M-e&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;c-end-of-defun&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-M-h&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;c-mark-function&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;M-a&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;c-beginning-of-statement&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;M-e&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;c-end-of-statement&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;M-l&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;eassist-list-methods&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;M-m&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;semantic-ia-complete-symbol-menu&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;M-o&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;eassist-switch-h-cpp&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-c 0&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;semantic-tag-folding-fold-all&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-c 1&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;semantic-tag-folding-show-all&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-c 2&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;semantic-tag-folding-fold-block&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-c 3&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;semantic-tag-folding-show-block&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-c 4&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;hs-hide-block&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-c 5&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;hs-show-block&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-c 6&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;hide-ifdef-block&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-c 7&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;show-ifdef-block&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a id=&#34;orgafb3e60&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;golang&#34;&gt;Golang&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;阅读代码&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;注: 一定记得先加代码工程到GOPATH中，否则godef不能跨包或文件夹跳转, 可以通过go build是否成功来验证配置正确性&lt;/span&gt;&lt;/p&gt;

&lt;table border=&#34;2&#34; cellspacing=&#34;0&#34; cellpadding=&#34;6&#34; rules=&#34;groups&#34; frame=&#34;hsides&#34;&gt;
    
    
&lt;colgroup&gt;
&lt;col  class=&#34;org-left&#34; /&gt;
    
&lt;col  class=&#34;org-left&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-left&#34;&gt;快捷键&lt;/th&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
    
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;f8&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;godef-jump&lt;/td&gt;
&lt;/tr&gt;
    
    
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;f7&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;gocscope-pop-mark&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;go-add-tags&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在evil-mode下使用v命令选择结构体区域&lt;/li&gt;
&lt;li&gt;按下M-x输入go-add-tags&lt;/li&gt;
&lt;li&gt;显示tags:后，输入json或输入其他自定义标签名,两个标签名之间使用逗号分开。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;gotests&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在evil-mode下使用v命令选择某些函数区域&lt;/li&gt;
&lt;li&gt;按下M-x输入gotests-region生成这些函数的gotest模板或直接输入gotests将生成本文件的所有函数测试模板。&lt;/li&gt;
&lt;li&gt;将在该目录下生成同名_test.go的测试文件。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;gocode自动补全&lt;/p&gt;

&lt;p&gt;正常安装gocode后，出现自动补全不了时，一般都是GOPATH没有包含到和没有进行go install的问题。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;标准库代码无法自动补全&lt;/p&gt;

&lt;p&gt;原因是由于没有把标准库路径加入到GOPATH中，例如：把/usr/local/go加入到GOPATH&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  ### go develop ###
  export GOROOT=/usr/local/go
  export GOARCH=amd64
  #export GOOS=linux
  export GOOS=darwin
  # export GOBIN=$GOROOT/bin/  一定不要设置GOBIN
  export GOTOOLS=$GOROOT/pkg/tool/
  export PATH=$PATH:$GOROOT/bin:$GOTOOLS

  ### mospan golang env setting ##
  export GOPATH=~/goget:$GOROOT
  GO111MODULE=auto
  gocode -s &amp;amp;
  gocode set propose-builtins true &amp;amp;
  gocode set autobuild true &amp;amp;
  #+BEGIN_SRC 

- 保留关键字无法自动补全

         gocode补全很强大，但是一些关键字import, package等不会补全。但可以通过修改auto-complete-settings.el中进行实现, 要补全的关键字在auto-complete/dict/go-mode中。
  #+BEGIN_SRC elisp
  (defun ac-settings-4-php ()
    (setq ac-sources
          &#39;(ac-source-yasnippet
            ac-source-abbrev
            ac-source-words-in-buffer
            ac-source-words-in-same-mode-buffers
            ac-source-files-in-current-dir
            ac-source-filename)))

  (am-add-hooks
   `(lisp-mode-hook emacs-lisp-mode-hook lisp-interaction-mode-hook
                    svn-log-edit-mode-hook change-log-mode-hook)
   &#39;ac-settings-4-lisp)

  (apply-args-list-to-fun
   (lambda (hook fun)
     (am-add-hooks hook fun))
   `((&#39;java-mode-hook   &#39;ac-settings-4-java)
     (&#39;c-mode-hook      &#39;ac-settings-4-c)
     (&#39;c++-mode-hook    &#39;ac-settings-4-cpp)
     (&#39;text-mode-hook   &#39;ac-settings-4-text)
     (&#39;eshell-mode-hook &#39;ac-settings-4-eshell)
     (&#39;ruby-mode-hook   &#39;ac-settings-4-ruby)
     (&#39;html-mode-hook   &#39;ac-settings-4-html)
     (&#39;awk-mode-hook    &#39;ac-settings-4-awk)
     (&#39;go-mode-hook    &#39;ac-settings-4-go)
     (&#39;lua-mode-hook    &#39;ac-settings-4-lua) ;;lua关键字补全还不好使，20190429 by mosp
     (&#39;sh-mode-hook    &#39;ac-settings-4-sh)
     (&#39;py-mode-hook    &#39;ac-settings-4-python)
     (&#39;php-mode-hook    &#39;ac-settings-4-php) ;;php关键字补全还不好使，20190429 by mosp
     (&#39;tcl-mode-hook    &#39;ac-settings-4-tcl)))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;用户库代码无法自动补全
原因：gocode查找的是libXX.a库而不是源代码文本，需要go install后就找到了。
一定不要设置GOBIN环境变量，否则go install将把二进制安装到GOBIN下而不是本工程目录下了。
  &lt;a href=&#34;https://www.cnblogs.com/Open_Source/p/8159098.html&#34;&gt;Emacs golang用户代码无法补全问题&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a id=&#34;org08adc25&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;gtd&#34;&gt;GTD&lt;/h2&gt;

&lt;p&gt;&lt;a id=&#34;org985fc62&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;全局&#34;&gt;全局&lt;/h3&gt;

&lt;table border=&#34;2&#34; cellspacing=&#34;0&#34; cellpadding=&#34;6&#34; rules=&#34;groups&#34; frame=&#34;hsides&#34;&gt;


&lt;colgroup&gt;
&lt;col  class=&#34;org-left&#34; /&gt;

&lt;col  class=&#34;org-left&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-left&#34;&gt;快捷键&lt;/th&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-c v&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;打开org-mode agenda视图&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-c v a&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;进入agenda视图，agenda view提供四种视图，分别是日(d)，周（w），月(v m)，年(v y)，括号里是切换这四种视图的快捷键。&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-c C-q&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;打标签&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-c C-r&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;打开org-remember进行备忘记录&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a id=&#34;orgc9aa3a5&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;在todo行上&#34;&gt;在TODO行上&lt;/h3&gt;

&lt;table border=&#34;2&#34; cellspacing=&#34;0&#34; cellpadding=&#34;6&#34; rules=&#34;groups&#34; frame=&#34;hsides&#34;&gt;


&lt;colgroup&gt;
&lt;col  class=&#34;org-left&#34; /&gt;

&lt;col  class=&#34;org-left&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-left&#34;&gt;快捷键&lt;/th&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-c C-t&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;切换TODO状态，循环选择&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-u C-c C-t&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;切换TODO状态，手工选择&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-c C-c&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;添加Tag&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-c C-s&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;添加Schedule&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-c C-d&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;添加Deadline&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-c .&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;添加时间戳&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-u C-c .&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;添加准确时间的时间戳&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-c C-w&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;移动到不同父节点&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a id=&#34;orgc9a8804&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;日历&#34;&gt;日历&lt;/h3&gt;

&lt;table border=&#34;2&#34; cellspacing=&#34;0&#34; cellpadding=&#34;6&#34; rules=&#34;groups&#34; frame=&#34;hsides&#34;&gt;


&lt;colgroup&gt;
&lt;col  class=&#34;org-left&#34; /&gt;

&lt;col  class=&#34;org-left&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-left&#34;&gt;快捷键&lt;/th&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-f 或者 左方向键&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;后一日&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-b 或者 右方向键&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;前一日&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-n 或者 下方向键&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;后一周&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;c-p 或者 上方向键&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;前一周&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;M-}&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;后一月&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;M-{&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;前一月&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-x ]&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;后一年&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-x [&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;前一年&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-a&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;移动到一周的开始&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;C-e&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;移动到一周的末尾&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;M-a&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;移动到一月的开始&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;M-e&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;移动到一月的末尾&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;M-&lt;&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;移动到一年的开始&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;M-&gt;&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;移动到一年的末尾&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a id=&#34;org53e1655&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;dired&#34;&gt;dired&lt;/h2&gt;

&lt;table border=&#34;2&#34; cellspacing=&#34;0&#34; cellpadding=&#34;6&#34; rules=&#34;groups&#34; frame=&#34;hsides&#34;&gt;


&lt;colgroup&gt;
&lt;col  class=&#34;org-left&#34; /&gt;

&lt;col  class=&#34;org-left&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-left&#34;&gt;快捷键&lt;/th&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;M-x d&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;打开dired模式&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;v&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;以只读方式查看文件&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;q&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;q for View-quit, 退出查看, 目录生效，文件中可能不生效，可以使用M-x V-q 或 Q 代替&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;Q&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;Q for View-quit-all, 退出所有查看&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;o&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;另一个窗口中，打开文件或目录&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
        </item>
        
        <item>
            <title>spacemacs使用初探</title>
            <link>http://mospany.github.io/2017/08/25/spacemacs-use-exploration/</link>
            <pubDate>Thu, 24 Aug 2017 17:08:26 CST</pubDate>
            <author>Mospan</author>
            <guid>http://mospany.github.io/2017/08/25/spacemacs-use-exploration/</guid>
            <description>

&lt;h1 id=&#34;概述-a-id-sec-1-name-sec-1-a&#34;&gt;概述&lt;a id=&#34;sec-1&#34; name=&#34;sec-1&#34;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;我自从2011年开始使用自己折腾的emacs到现在， 用着它写golang时发现函数列表与补全功能不太好使，一直知道spacemacs的名声，今天想尝试下其效果如果如何，有啥奇妙之处。
我一般用它来写Golang、C、Lua、Shell、GTD和Blog，看看spacemacs是否满足我所需和习惯。&lt;/p&gt;

&lt;h1 id=&#34;安装-a-id-sec-2-name-sec-2-a&#34;&gt;安装&lt;a id=&#34;sec-2&#34; name=&#34;sec-2&#34;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Spacemacs的Github地址为：&lt;a href=&#34;https://github.com/syl20bnr/spacemacs&#34;&gt;https://github.com/syl20bnr/spacemacs&lt;/a&gt;, 如果你的系统已装有Emacs，请先备份Emacs配置文件。因为Spacemacs的配置会覆盖掉原Emacs的配置文件。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~ 
mv .emacs.d .emacs.d.bak 
mv .emacs .emacs.bak
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你的系统没有安装Emacs，需要先安装Emacs，请注意Emacs版本至少为24.4。&lt;/p&gt;

&lt;h2 id=&#34;安装spacemacs-a-id-sec-2-1-name-sec-2-1-a&#34;&gt;安装spacemacs&lt;a id=&#34;sec-2-1&#34; name=&#34;sec-2-1&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;启动spacemacs-a-id-sec-2-2-name-sec-2-2-a&#34;&gt;启动spacemacs&lt;a id=&#34;sec-2-2&#34; name=&#34;sec-2-2&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;emacs -mm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;初次启动Spacemacs会进行初始化配置（启动时会询问使用简、全哪套配置方案），安装依赖有可能需要一段时间。
在通过命令行启动Spacemacs后，可能会发现状态栏乱码了。这是因为字体不支持的原因，需要安装Source Code Pro字体。 同时，还可能需要安装Powerline字体补丁。&lt;/p&gt;

&lt;h1 id=&#34;配置-a-id-sec-3-name-sec-3-a&#34;&gt;配置&lt;a id=&#34;sec-3&#34; name=&#34;sec-3&#34;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;h2 id=&#34;增加启动layers-a-id-sec-3-1-name-sec-3-1-a&#34;&gt;增加启动layers&lt;a id=&#34;sec-3-1&#34; name=&#34;sec-3-1&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;由于我主要写Golang、C、Lua、Shell、GTD和Blog，增加相应的启动layers即可。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dotspacemacs-configuration-layers
&#39;(
  c-c++
  go
  lua
  html
  ;; ----------------------------------------------------------------
  ;; Example of useful layers you may want to use right away.
  ;; Uncomment some layer names and press &amp;lt;SPC f e R&amp;gt; (Vim style) or
  ;; &amp;lt;M-m f e R&amp;gt; (Emacs style) to install them.
  ;; ----------------------------------------------------------------
  helm
  auto-completion
  ;; better-defaults
  emacs-lisp
  git
  markdown
  org
  ;; (shell :variables
  ;;        shell-default-height 30
  ;;        shell-default-position &#39;bottom)
  ;; spell-checking
  ;; syntax-checking
  ;; version-control
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;使用-a-id-sec-4-name-sec-4-a&#34;&gt;使用&lt;a id=&#34;sec-4&#34; name=&#34;sec-4&#34;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;h2 id=&#34;working-with-go-a-id-sec-4-1-name-sec-4-1-a&#34;&gt;Working with Go&lt;a id=&#34;sec-4-1&#34; name=&#34;sec-4-1&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&#34;go-commands-start-with-m-a-id-sec-4-1-1-name-sec-4-1-1-a&#34;&gt;Go commands (start with &lt;code&gt;m&lt;/code&gt;):&lt;a id=&#34;sec-4-1-1&#34; name=&#34;sec-4-1-1&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;table border=&#34;2&#34; cellspacing=&#34;0&#34; cellpadding=&#34;6&#34; rules=&#34;groups&#34; frame=&#34;hsides&#34;&gt;


&lt;colgroup&gt;
&lt;col  class=&#34;left&#34; /&gt;

&lt;col  class=&#34;left&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&#34;col&#34; class=&#34;left&#34;&gt;Key Binding&lt;/th&gt;
&lt;th scope=&#34;col&#34; class=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m h h`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;godoc at point&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m i g`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;goto imports&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m i a`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;add import&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m i r`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;remove unused import&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m e b`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;go-play buffer&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m e r`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;go-play region&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m e d`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;download go-play snippet&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m x x`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;run &#34;go run&#34; for the current &#39;main&#39; package&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m g a`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;jump to matching test file or back from test to code file&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m g c`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;open a clone of the current buffer with a coverage info (`go tool cover -h` for help)&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m g g`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;go jump to definition&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m r n`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;go rename&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m t p`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;run &#34;go test&#34; for the current package&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m t P`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;run &#34;go test&#34; for the current package and all packages under it&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m t t`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;run &#34;go test&#34; for the function you&#39;re currently in (while you&#39;re in a \_.test.go file)&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m t s`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;run &#34;go test&#34; for the suite you&#39;re currently in (requires gocheck)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;go-guru-a-id-sec-4-1-2-name-sec-4-1-2-a&#34;&gt;Go Guru&lt;a id=&#34;sec-4-1-2&#34; name=&#34;sec-4-1-2&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;table border=&#34;2&#34; cellspacing=&#34;0&#34; cellpadding=&#34;6&#34; rules=&#34;groups&#34; frame=&#34;hsides&#34;&gt;


&lt;colgroup&gt;
&lt;col  class=&#34;left&#34; /&gt;

&lt;col  class=&#34;left&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&#34;col&#34; class=&#34;left&#34;&gt;Key Binding&lt;/th&gt;
&lt;th scope=&#34;col&#34; class=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m f d`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;go-guru describe symbol at point&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m f f`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;go-guru show free variables&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m f i`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;go-guru show implements relation&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m f c`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;go-guru show channel sends/receives&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m f r`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;go-guru show referrers&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m f j`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;go-guru jump to symbol definition&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m f p`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;go-guru show what the select expression points to&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m f s`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;go-guru show callstack&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m f e`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;go-guru show possible contants/types for error value&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m f &lt;`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;go-guru show possible callers&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m f &gt;`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;go-guru show call targets&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;`SPC m f o`&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;go-guru set analysis scope&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
        </item>
        
        <item>
            <title>DNS体系之_基础</title>
            <link>http://mospany.github.io/2017/07/17/dns-architecture-base/</link>
            <pubDate>Thu, 20 Jul 2017 07:39:07 CST</pubDate>
            <author>Mospan</author>
            <guid>http://mospany.github.io/2017/07/17/dns-architecture-base/</guid>
            <description>

&lt;h1 id=&#34;描述&#34;&gt;描述&lt;/h1&gt;

&lt;p&gt;此《DNS体系基础》为在公司进行的一次内部分享， 现也把它放到博客中来，以便更多的读者分享交流。PPT内容由我个人的理解编写与部分来自互联网上的整理。&lt;/p&gt;

&lt;h1 id=&#34;ppt内容&#34;&gt;PPT内容&lt;/h1&gt;

&lt;p&gt;&lt;center&gt;&lt;embed src=&#34;http://blog.mospan.cn/post/img/dns-architecture-base.pdf&#34; width=100% height=&#34;800&#34;&gt;&lt;/center&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>精品文章，阅后收藏</title>
            <link>http://mospany.github.io/2017/03/07/collection-after-reading/</link>
            <pubDate>Tue, 07 Mar 2017 19:13:23 CST</pubDate>
            <author>Mospan</author>
            <guid>http://mospany.github.io/2017/03/07/collection-after-reading/</guid>
            <description>

&lt;h1 id=&#34;职场人性类-a-id-sec-1-name-sec-1-a&#34;&gt;职场人性类&lt;a id=&#34;sec-1&#34; name=&#34;sec-1&#34;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;h2 id=&#34;励志-a-id-sec-1-1-name-sec-1-1-a&#34;&gt;励志&lt;a id=&#34;sec-1-1&#34; name=&#34;sec-1-1&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;[☆☆☆☆☆] &lt;a href=&#34;http://url.cn/4Ab2KpB&#34;&gt;你同学都身价上亿了，你却还在纠结早晨几点能起床？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[☆☆☆☆☆] &lt;a href=&#34;http://url.cn/4A4t6hF&#34;&gt;你的收入，为什么还没有指数增长？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[☆☆☆☆☆] &lt;a href=&#34;http://url.cn/4Ab4hhC&#34;&gt;你的勤奋是有效的吗？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;编码人生-a-id-sec-1-2-name-sec-1-2-a&#34;&gt;编码人生&lt;a id=&#34;sec-1-2&#34; name=&#34;sec-1-2&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;[☆☆☆☆☆] &lt;a href=&#34;http://url.cn/4AaxYwK&#34;&gt;程序员分七个个等级，你属于哪一级？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[☆☆☆☆☆] &lt;a href=&#34;http://url.cn/4Ab2MSi&#34;&gt;技术大牛养成指南，一篇不鸡汤的成功学实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[☆☆☆☆☆] &lt;a href=&#34;http://url.cn/4Ab2PsT&#34;&gt;技术人员的发展之路&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;人在职涯-a-id-sec-1-3-name-sec-1-3-a&#34;&gt;人在职涯&lt;a id=&#34;sec-1-3&#34; name=&#34;sec-1-3&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;[☆☆☆☆☆] &lt;a href=&#34;http://url.cn/4Ab3ez7&#34;&gt;老板和下属最好的关系，是彼此成就&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[☆☆☆☆☆] &lt;a href=&#34;http://url.cn/4Ab2ap9&#34;&gt;为何我工作十年，内心仍无比恐慌？（完整版强烈推荐）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[☆☆☆☆☆] &lt;a href=&#34;http://url.cn/4Ab3z9e&#34;&gt;互联网择业指南（技术篇）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[☆☆☆☆☆] &lt;a href=&#34;http://url.cn/4Ab2kLS&#34;&gt;CTO、技术总监和技术经理有啥区别？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[☆☆☆☆☆] &lt;a href=&#34;http://url.cn/4Ab2m1i&#34;&gt;张一鸣10年面试过2000人：混得好的年轻人都有这 5 种特质！&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[☆☆☆☆☆] &lt;a href=&#34;http://url.cn/49bjiSq&#34;&gt;为什么你有10年经验，但成不了专家？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[☆☆☆☆☆] &lt;a href=&#34;http://url.cn/4Ab4R4I&#34;&gt;你 get 了无数技能，为什么一事无成&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;创业-a-id-sec-1-4-name-sec-1-4-a&#34;&gt;创业&lt;a id=&#34;sec-1-4&#34; name=&#34;sec-1-4&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;[☆☆☆☆☆] &lt;a href=&#34;http://url.cn/4Ab2cwx&#34;&gt;创业3次成功3次、身价10亿的庄辰超：最让我骄傲的是这9点管理心得&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[☆☆☆☆☆] &lt;a href=&#34;http://url.cn/4Ab2nA1&#34;&gt;创业者具备这几种能力，就能提高成功的概率！&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;技术类-a-id-sec-2-name-sec-2-a&#34;&gt;技术类&lt;a id=&#34;sec-2&#34; name=&#34;sec-2&#34;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;h2 id=&#34;基础-a-id-sec-2-1-name-sec-2-1-a&#34;&gt;基础&lt;a id=&#34;sec-2-1&#34; name=&#34;sec-2-1&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;语言-a-id-sec-2-2-name-sec-2-2-a&#34;&gt;语言&lt;a id=&#34;sec-2-2&#34; name=&#34;sec-2-2&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&#34;c-a-id-sec-2-2-1-name-sec-2-2-1-a&#34;&gt;C&lt;a id=&#34;sec-2-2-1&#34; name=&#34;sec-2-2-1&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;go-a-id-sec-2-2-2-name-sec-2-2-2-a&#34;&gt;Go&lt;a id=&#34;sec-2-2-2&#34; name=&#34;sec-2-2-2&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;lua-a-id-sec-2-2-3-name-sec-2-2-3-a&#34;&gt;Lua&lt;a id=&#34;sec-2-2-3&#34; name=&#34;sec-2-2-3&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;shell-a-id-sec-2-2-4-name-sec-2-2-4-a&#34;&gt;Shell&lt;a id=&#34;sec-2-2-4&#34; name=&#34;sec-2-2-4&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;python-a-id-sec-2-2-5-name-sec-2-2-5-a&#34;&gt;Python&lt;a id=&#34;sec-2-2-5&#34; name=&#34;sec-2-2-5&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;h2 id=&#34;linux-a-id-sec-2-3-name-sec-2-3-a&#34;&gt;Linux&lt;a id=&#34;sec-2-3&#34; name=&#34;sec-2-3&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&#34;user-space-a-id-sec-2-3-1-name-sec-2-3-1-a&#34;&gt;User Space&lt;a id=&#34;sec-2-3-1&#34; name=&#34;sec-2-3-1&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;[☆☆☆☆☆] &lt;a href=&#34;http://url.cn/4Ab4FDD&#34;&gt;Linux内存中的Cache真的能被回收么？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[☆☆☆☆☆] &lt;a href=&#34;http://url.cn/4Ab39hR&#34;&gt;如何用 sysdig 监控和排查 Linux 服务器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;kernel-space-a-id-sec-2-3-2-name-sec-2-3-2-a&#34;&gt;Kernel Space&lt;a id=&#34;sec-2-3-2&#34; name=&#34;sec-2-3-2&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;h2 id=&#34;网络-a-id-sec-2-4-name-sec-2-4-a&#34;&gt;网络&lt;a id=&#34;sec-2-4&#34; name=&#34;sec-2-4&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;算法-a-id-sec-2-5-name-sec-2-5-a&#34;&gt;算法&lt;a id=&#34;sec-2-5&#34; name=&#34;sec-2-5&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;数据库-a-id-sec-2-6-name-sec-2-6-a&#34;&gt;数据库&lt;a id=&#34;sec-2-6&#34; name=&#34;sec-2-6&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&#34;mysql-a-id-sec-2-6-1-name-sec-2-6-1-a&#34;&gt;mysql&lt;a id=&#34;sec-2-6-1&#34; name=&#34;sec-2-6-1&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;[☆☆☆☆☆] &lt;a href=&#34;http://url.cn/4Ab5ZNV&#34;&gt;单表60亿记录等大数据场景的MySQL优化和运维之道 | 高可用架构&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;redis-a-id-sec-2-6-2-name-sec-2-6-2-a&#34;&gt;redis&lt;a id=&#34;sec-2-6-2&#34; name=&#34;sec-2-6-2&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;mongo-a-id-sec-2-6-3-name-sec-2-6-3-a&#34;&gt;mongo&lt;a id=&#34;sec-2-6-3&#34; name=&#34;sec-2-6-3&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;h2 id=&#34;web-a-id-sec-2-7-name-sec-2-7-a&#34;&gt;web&lt;a id=&#34;sec-2-7&#34; name=&#34;sec-2-7&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;[☆☆☆☆☆] &lt;a href=&#34;http://url.cn/4Ab2suR&#34;&gt;为何大量网站不能抓取?爬虫突破封禁的6种常见方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[☆☆☆☆☆] &lt;a href=&#34;http://url.cn/4Ab3Enu&#34;&gt;大型网站架构系列：负载均衡详解（上）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;架构-a-id-sec-2-8-name-sec-2-8-a&#34;&gt;架构&lt;a id=&#34;sec-2-8&#34; name=&#34;sec-2-8&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&#34;微服务-a-id-sec-2-8-1-name-sec-2-8-1-a&#34;&gt;微服务&lt;a id=&#34;sec-2-8-1&#34; name=&#34;sec-2-8-1&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;[☆☆☆☆☆] &lt;a href=&#34;http://url.cn/4Ab3Q5b&#34;&gt;深入聊聊微服务架构的身份认证问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[☆☆☆☆☆] &lt;a href=&#34;http://url.cn/4Ab2FPk&#34;&gt;区块链技术与微服务架构之间有什么关系？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[☆☆☆☆☆] &lt;a href=&#34;http://url.cn/47gHRa2&#34;&gt;架构师之路16年精选50篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[☆☆☆☆☆] &lt;a href=&#34;http://url.cn/4Ab44n4&#34;&gt;华为内部如何实施微服务架构？基本就靠这5大原则&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;分布式-a-id-sec-2-8-2-name-sec-2-8-2-a&#34;&gt;分布式&lt;a id=&#34;sec-2-8-2&#34; name=&#34;sec-2-8-2&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;[☆☆☆☆☆] &lt;a href=&#34;http://url.cn/4Ab2vCa&#34;&gt;保证分布式系统数据一致性的6种方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[☆☆☆☆☆] &lt;a href=&#34;http://url.cn/4Ab5RSd&#34;&gt;高性能分布式计算与存储系统设计概要&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;其他-a-id-sec-2-8-3-name-sec-2-8-3-a&#34;&gt;其他&lt;a id=&#34;sec-2-8-3&#34; name=&#34;sec-2-8-3&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;[☆☆☆☆☆] &lt;a href=&#34;http://url.cn/4Ab3Fxk&#34;&gt;老卫聊架构：做技术，应该先有深度再谈广度&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[☆☆☆☆☆] &lt;a href=&#34;http://url.cn/4Ab3I8f&#34;&gt;Brandon聊架构：架构师是否应该写代码？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[☆☆☆☆☆] &lt;a href=&#34;http://url.cn/4Ab3K6b&#34;&gt;架构师和开发团队应该如何协作？组织架构怎么设置最好？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;开源技术类-a-id-sec-3-name-sec-3-a&#34;&gt;开源技术类&lt;a id=&#34;sec-3&#34; name=&#34;sec-3&#34;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;h2 id=&#34;dpdk-a-id-sec-3-1-name-sec-3-1-a&#34;&gt;DPDK&lt;a id=&#34;sec-3-1&#34; name=&#34;sec-3-1&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;[☆☆☆☆☆] &lt;a href=&#34;http://url.cn/4Ab2HPn&#34;&gt;从10Gb到40Gb，从百万级到千万级转发，打造高性能TGW&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;nginx-a-id-sec-3-2-name-sec-3-2-a&#34;&gt;nginx&lt;a id=&#34;sec-3-2&#34; name=&#34;sec-3-2&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;h1 id=&#34;产品类-a-id-sec-4-name-sec-4-a&#34;&gt;产品类&lt;a id=&#34;sec-4&#34; name=&#34;sec-4&#34;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;[☆☆☆☆☆] &lt;a href=&#34;http://url.cn/4Ab2eEd&#34;&gt;如何8步「闭环」开发互联网产品 | 流程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;行业类-a-id-sec-5-name-sec-5-a&#34;&gt;行业类&lt;a id=&#34;sec-5&#34; name=&#34;sec-5&#34;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;h2 id=&#34;cdn-a-id-sec-5-1-name-sec-5-1-a&#34;&gt;CDN&lt;a id=&#34;sec-5-1&#34; name=&#34;sec-5-1&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&#34;调度-a-id-sec-5-1-1-name-sec-5-1-1-a&#34;&gt;调度&lt;a id=&#34;sec-5-1-1&#34; name=&#34;sec-5-1-1&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;[☆☆☆☆☆] &lt;a href=&#34;http://url.cn/4Ab5Xy1&#34;&gt;【鹅厂网事】全局精确流量调度新思路-HttpDNS服务详解&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;缓存-a-id-sec-5-1-2-name-sec-5-1-2-a&#34;&gt;缓存&lt;a id=&#34;sec-5-1-2&#34; name=&#34;sec-5-1-2&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;监控-a-id-sec-5-1-3-name-sec-5-1-3-a&#34;&gt;监控&lt;a id=&#34;sec-5-1-3&#34; name=&#34;sec-5-1-3&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;[☆☆☆☆☆] &lt;a href=&#34;http://url.cn/4Ab2yuj&#34;&gt;【演讲实录】企业级监控系统的变革与演进&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;boss-a-id-sec-5-1-4-name-sec-5-1-4-a&#34;&gt;BOSS&lt;a id=&#34;sec-5-1-4&#34; name=&#34;sec-5-1-4&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;h2 id=&#34;dns-a-id-sec-5-2-name-sec-5-2-a&#34;&gt;DNS&lt;a id=&#34;sec-5-2&#34; name=&#34;sec-5-2&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;直播-a-id-sec-5-3-name-sec-5-3-a&#34;&gt;直播&lt;a id=&#34;sec-5-3&#34; name=&#34;sec-5-3&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;[☆☆☆☆☆] &lt;a href=&#34;http://url.cn/4Ab2Vh1&#34;&gt;从直播CDN的原理说起，谈如何解决延时和连麦的老难题？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;云计算-a-id-sec-5-4-name-sec-5-4-a&#34;&gt;云计算&lt;a id=&#34;sec-5-4&#34; name=&#34;sec-5-4&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;大数据-a-id-sec-5-5-name-sec-5-5-a&#34;&gt;大数据&lt;a id=&#34;sec-5-5&#34; name=&#34;sec-5-5&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;[☆☆☆☆☆] &lt;a href=&#34;http://url.cn/4Ab34yf&#34;&gt;华为内部狂转好文，有关大数据，看这一篇就够了！&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;人工智能-a-id-sec-5-6-name-sec-5-6-a&#34;&gt;人工智能&lt;a id=&#34;sec-5-6&#34; name=&#34;sec-5-6&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;a-id-sec-5-7-name-sec-5-7-a&#34;&gt;&lt;a id=&#34;sec-5-7&#34; name=&#34;sec-5-7&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;h1 id=&#34;管理类-a-id-sec-6-name-sec-6-a&#34;&gt;管理类&lt;a id=&#34;sec-6&#34; name=&#34;sec-6&#34;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;[☆☆☆☆☆] &lt;a href=&#34;http://url.cn/4Ab3wXB&#34;&gt;柳传志：十种人不适合做管理者！(管理者必读)丨企业家&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[☆☆☆☆☆] &lt;a href=&#34;http://url.cn/4Ab342i&#34;&gt;那些年我们从技术转了管理 | 初级篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[☆☆☆☆☆] &lt;a href=&#34;http://url.cn/4Ab36IN&#34;&gt;{原创}跨年总结系列之二：关于晋升，什么样的人才能胜任高级经理？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[☆☆☆☆☆] &lt;a href=&#34;http://url.cn/4Ab4kvU&#34;&gt;浅谈领导力之二 - 授权与放权&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
        <item>
            <title>openresty&#43;redis实践记录</title>
            <link>http://mospany.github.io/2017/03/02/openresty&#43;redis-practices/</link>
            <pubDate>Thu, 02 Mar 2017 11:14:08 CST</pubDate>
            <author>Mospan</author>
            <guid>http://mospany.github.io/2017/03/02/openresty&#43;redis-practices/</guid>
            <description>

&lt;h1 id=&#34;安装-a-id-sec-1-name-sec-1-a&#34;&gt;安装&lt;a id=&#34;sec-1&#34; name=&#34;sec-1&#34;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;h2 id=&#34;openresty安装-a-id-sec-1-1-name-sec-1-1-a&#34;&gt;openresty安装&lt;a id=&#34;sec-1-1&#34; name=&#34;sec-1-1&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;详见 &lt;a href=&#34;https://openresty.org/cn/installation.html&#34;&gt;openresty安装&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;redis安装-a-id-sec-1-2-name-sec-1-2-a&#34;&gt;redis安装&lt;a id=&#34;sec-1-2&#34; name=&#34;sec-1-2&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;执行如下命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get update  
sudo apt-get install redis-server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;详见 &lt;a href=&#34;http://www.jianshu.com/p/c8723b677304&#34;&gt;Ubuntu安装配置Redis&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;redis启动-a-id-sec-1-3-name-sec-1-3-a&#34;&gt;redis启动&lt;a id=&#34;sec-1-3&#34; name=&#34;sec-1-3&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;执行如下命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;redis-server /etc/redis/redis-master.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如需启动redis slave，只需把原有配置修改如下几行即可。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;slaveof 192.168.1.1 7648
slave-priority 100
slave-read-only yes
slave-serve-stale-data yes
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;openresty启动-a-id-sec-1-4-name-sec-1-4-a&#34;&gt;openresty启动&lt;a id=&#34;sec-1-4&#34; name=&#34;sec-1-4&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;执行如下命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@bj94:/usr/local/openresty/nginx# pwd
       /usr/local/openresty/nginx
root@bj94:/usr/local/openresty/nginx# ./sbin/nginx -p `pwd` -c conf/nginx.conf
         nginx: [alert] lua_code_cache is off; this will hurt performance in /usr/local/openresty/nginx/conf/nginx.conf:29
root@bj94:/usr/local/openresty/nginx#
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;常用命令-a-id-sec-2-name-sec-2-a&#34;&gt;常用命令&lt;a id=&#34;sec-2&#34; name=&#34;sec-2&#34;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;h2 id=&#34;redis-a-id-sec-2-1-name-sec-2-1-a&#34;&gt;redis&lt;a id=&#34;sec-2-1&#34; name=&#34;sec-2-1&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;table border=&#34;2&#34; cellspacing=&#34;0&#34; cellpadding=&#34;6&#34; rules=&#34;groups&#34; frame=&#34;hsides&#34;&gt;


&lt;colgroup&gt;
&lt;col  class=&#34;left&#34; /&gt;

&lt;col  class=&#34;left&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&#34;col&#34; class=&#34;left&#34;&gt;命令&lt;/th&gt;
&lt;th scope=&#34;col&#34; class=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;DBSIZE&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;返回当前数据里面keys的数量&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&#34;编写api-a-id-sec-3-name-sec-3-a&#34;&gt;编写API&lt;a id=&#34;sec-3&#34; name=&#34;sec-3&#34;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;根据项目要求编写openresty+lua的增删改查API接口。&lt;/p&gt;

&lt;h1 id=&#34;测试-a-id-sec-4-name-sec-4-a&#34;&gt;测试&lt;a id=&#34;sec-4&#34; name=&#34;sec-4&#34;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;h2 id=&#34;发送请求-a-id-sec-4-1-name-sec-4-1-a&#34;&gt;发送请求&lt;a id=&#34;sec-4-1&#34; name=&#34;sec-4-1&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;使用curl命令发送http json请求:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;先写请求json&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;root@bj94:~/dr302client# cat add.json
{&lt;/p&gt;

&lt;p&gt;&amp;ldquo;www.example.com&amp;rdquo;: {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;quot;sub\_domain&amp;quot;: &amp;quot;@&amp;quot;,
    &amp;quot;record\_type&amp;quot;: &amp;quot;CNAME&amp;quot;,
    &amp;quot;record\_line&amp;quot;: &amp;quot;all&amp;quot;,
    &amp;quot;record\_line\_id&amp;quot;: &amp;quot;00000000&amp;quot;,
    &amp;quot;value&amp;quot;: &amp;quot;all.china.qiniu.qnydns.com&amp;quot;,
    &amp;quot;mx&amp;quot;: 1,
    &amp;quot;ttl&amp;quot;: 86400,
    &amp;quot;status&amp;quot;: &amp;quot;enable&amp;quot;,
    &amp;quot;weight&amp;quot;: 100
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;执行命令：&lt;/p&gt;

&lt;p&gt;curl -i -H &amp;lsquo;content-type: application/json&amp;rsquo; -X POST -d @add.json &lt;a href=&#34;http://dev.mgrconfig.api.qiniudns.com/qiniu/dr302/records/add&#34;&gt;http://dev.mgrconfig.api.qiniudns.com/qiniu/dr302/records/add&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;回复响应-a-id-sec-4-2-name-sec-4-2-a&#34;&gt;回复响应&lt;a id=&#34;sec-4-2&#34; name=&#34;sec-4-2&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;根据不同返回码表示操作结果。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;root@bj94:~/dr302client# curl -i -H &amp;lsquo;content-type: application/json&amp;rsquo; -X POST -d @addA.json &lt;a href=&#34;http://dev.mgrconfig.api.qiniudns.com/qiniu/dr302/records/add&#34;&gt;http://dev.mgrconfig.api.qiniudns.com/qiniu/dr302/records/add&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;HTTP/1.1 200 OK
Date: Thu, 09 Mar 2017 03:01:17 GMT
Content-Type: text/plain
Transfer-Encoding: chunked
Connection: keep-alive
Server: DR302-MGR&lt;/p&gt;

&lt;p&gt;{
    &amp;ldquo;status&amp;rdquo;:{
               &amp;ldquo;created_at&amp;rdquo;:&amp;ldquo;2017-03-09 11:01:17&amp;rdquo;,
               &amp;ldquo;code&amp;rdquo;:0,
               &amp;ldquo;message&amp;rdquo;:&amp;ldquo;success&amp;rdquo;
             },
    &amp;ldquo;record&amp;rdquo;:{
               &amp;ldquo;status&amp;rdquo;:&amp;ldquo;enable&amp;rdquo;,
               &amp;ldquo;key&amp;rdquo;:&amp;ldquo;www.example.com#all&amp;rdquo;,
               &amp;ldquo;name&amp;rdquo;:&amp;ldquo;@&amp;rdquo;
             }
}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;查看存储-a-id-sec-4-3-name-sec-4-3-a&#34;&gt;查看存储&lt;a id=&#34;sec-4-3&#34; name=&#34;sec-4-3&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;执行命令:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(echo  &amp;quot;select 10&amp;quot;; echo &amp;quot;hgetall www.example.com#all&amp;quot;) | redis-cli -a cdnfusion -p 7648&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;避免中文乱码，加&amp;#x2013;raw选项：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(echo  &amp;quot;select 10&amp;quot;; echo &amp;quot;hgetall www.example.com#all&amp;quot;) | redis-cli -a cdnfusion -p 7648 --raw
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;显示如下:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;root@bj94:~/dr302client# (echo  &amp;ldquo;select 10&amp;rdquo;; echo &amp;ldquo;hgetall www.example.com#all&amp;rdquo;) | redis-cli -a cdnfusion -p 7648
OK
1.  &amp;ldquo;weight&amp;rdquo;
2.  &amp;ldquo;20&amp;rdquo;
3.  &amp;ldquo;record_type&amp;rdquo;
4.  &amp;ldquo;A&amp;rdquo;
5.  &amp;ldquo;record_line&amp;rdquo;
6.  &amp;ldquo;all&amp;rdquo;
7.  &amp;ldquo;status&amp;rdquo;
8.  &amp;ldquo;enable&amp;rdquo;
9.  &amp;ldquo;mx&amp;rdquo;
10. &amp;ldquo;1&amp;rdquo;
11. &amp;ldquo;value&amp;rdquo;
12. &amp;ldquo;1.1.1.1#10|2.2.2.2#20&amp;rdquo;
13. &amp;ldquo;ttl&amp;rdquo;
14. &amp;ldquo;86400&amp;rdquo;
15. &amp;ldquo;record_line_id&amp;rdquo;
16. &amp;ldquo;00000000&amp;rdquo;
17. &amp;ldquo;sub_domain&amp;rdquo;
18. &amp;ldquo;@&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;302测试-a-id-sec-4-4-name-sec-4-4-a&#34;&gt;302测试&lt;a id=&#34;sec-4-4&#34; name=&#34;sec-4-4&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&#34;请求-a-id-sec-4-4-1-name-sec-4-4-1-a&#34;&gt;请求&lt;a id=&#34;sec-4-4-1&#34; name=&#34;sec-4-4-1&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;curl http://192.168.92.94:8302/ -H &amp;quot;host: www.example.com&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;响应-a-id-sec-4-5-name-sec-4-5-a&#34;&gt;响应&lt;a id=&#34;sec-4-5&#34; name=&#34;sec-4-5&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;响应如下：&lt;/p&gt;

&lt;p&gt;root@bj94:~/dr302client# curl &lt;a href=&#34;http://192.168.92.94:8302/&#34;&gt;http://192.168.92.94:8302/&lt;/a&gt; -H &amp;ldquo;host: www.example.com&amp;rdquo; -v
*   Trying 192.168.92.94&amp;hellip;
* Connected to 192.168.92.94 (192.168.92.94) port 8302 (#0)
&amp;gt; GET / HTTP/1.1
&amp;gt; host: www.example.com
&amp;gt; User-Agent: curl/7.47.0
&amp;gt; Accept: &lt;em&gt;/&lt;/em&gt;
&amp;gt;
&amp;lt; HTTP/1.1 302 Moved Temporarily
&amp;lt; Date: Fri, 07 Apr 2017 02:30:50 GMT
&amp;lt; Content-Type: text/html
&amp;lt; Content-Length: 167
&amp;lt; Connection: keep-alive
&amp;lt; Server: DR302-NODE
&amp;lt; Location: &lt;a href=&#34;http://2.2.2.2/www.example.com/&#34;&gt;http://2.2.2.2/www.example.com/&lt;/a&gt;
&amp;lt;
&lt;html&gt;
&lt;head&gt;&lt;title&gt;302 Found&lt;/title&gt;&lt;/head&gt;
&lt;body bgcolor=&#34;white&#34;&gt;
&lt;center&gt;&lt;h1&gt;302 Found&lt;/h1&gt;&lt;/center&gt;
&lt;hr&gt;&lt;center&gt;openresty/1.11.2.1&lt;/center&gt;
&lt;/body&gt;
&lt;/html&gt;&lt;/p&gt;

&lt;h2 id=&#34;性能测试-a-id-sec-4-6-name-sec-4-6-a&#34;&gt;性能测试&lt;a id=&#34;sec-4-6&#34; name=&#34;sec-4-6&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;使用ab测试DR302服务器的性能。&lt;/p&gt;

&lt;h3 id=&#34;测试步骤-a-id-sec-4-6-1-name-sec-4-6-1-a&#34;&gt;测试步骤&lt;a id=&#34;sec-4-6-1&#34; name=&#34;sec-4-6-1&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;1） 由于ab不支持参数修改HOST字段，需把要测试的域名IP对设置到/etc/hosts中。如: 192.168.92.94 www.example.com
1.  ab测试输出信息，查看项“ Requests per second”。
    a) 带有keepalive的性能为80000QPS。
       ab -kc 1024 -n 1000000 &lt;a href=&#34;http://www.example.com:8302/&#34;&gt;http://www.example.com:8302/&lt;/a&gt;
    b) 不带keepalive的性能为16000QPS。
       ab -c 1024 -n 1000000 &lt;a href=&#34;http://www.example.com:8302/&#34;&gt;http://www.example.com:8302/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;优化点-a-id-sec-4-6-2-name-sec-4-6-2-a&#34;&gt;优化点&lt;a id=&#34;sec-4-6-2&#34; name=&#34;sec-4-6-2&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;关闭日志记录&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;access_log off;
error_log  /usr/local/openresty/nginx/logs/dr302_node_error.log error;&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;打开缓存
把nginx.conf里的这行打开或加上。
lua_code_cache on;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;3）使用ulimit -n 65535设置open files数。
1.  设置nginx的进程数与本服务器CPU匹配的值，如: 8
2.  关闭掉一些耗性能的进程。&lt;/p&gt;

&lt;h2 id=&#34;踩过的坑-a-id-sec-4-7-name-sec-4-7-a&#34;&gt;踩过的坑&lt;a id=&#34;sec-4-7&#34; name=&#34;sec-4-7&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&#34;table的深度与浅度拷贝-a-id-sec-4-7-1-name-sec-4-7-1-a&#34;&gt;table的深度与浅度拷贝&lt;a id=&#34;sec-4-7-1&#34; name=&#34;sec-4-7-1&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;现象&lt;/p&gt;

&lt;p&gt;当通过API批量获取配置列表时，发现不同的key获取的值是一样的， 但通过redis-cli获取是不一样且正确的。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;分析&lt;/p&gt;

&lt;p&gt;redis存储是正确的，很有可能是中间临时存储存在覆盖的问题， 如果table每次赋值都相当于内存拷贝那样Lua的性能就会大大降低，
会不会table之间赋值就像C语言一样只赋值地址或指针。经网上查找发现table存在深度与浅度拷贝的区别。
详见:&lt;a href=&#34;https://my.oschina.net/hqc17/blog/748709&#34;&gt;Lua实现深度拷贝&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;解决措施&lt;/p&gt;

&lt;p&gt;把中间的临时table变量放入当前语句块中并加local标识，猜测在当前语句块临时table可能会随时被释放掉，
因此它赋值给其他作用域更大的变量时使用深拷贝。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;hgetall结果与lua-table转换-a-id-sec-4-7-2-name-sec-4-7-2-a&#34;&gt;hgetall结果与Lua table转换&lt;a id=&#34;sec-4-7-2&#34; name=&#34;sec-4-7-2&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;使用hgetall获取redis的内容需经转换后才能被Lua table使用。
转换关键代码如下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 1  local v = red:hgetall(innerk) 
 2  if v == nil then
 3      log(ERR, &amp;quot;get redis empty key: &amp;quot;, innerk)
 4      return nil
 5  end
 6  for key,val in pairs(v) do
 7     if key%2 ~= 0 then
 8        result[v[key]] = v[key+1];
 9     end
10  end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;nginx-worker权限问题-a-id-sec-4-7-3-name-sec-4-7-3-a&#34;&gt;nginx worker权限问题&lt;a id=&#34;sec-4-7-3&#34; name=&#34;sec-4-7-3&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;现象&lt;/p&gt;

&lt;p&gt;当使用init_worker_by_lua_file进行定时器任务时，发现不能打开或写入/usr/local/openresty/子目录下的文件， 而init_by_lua_file调用则正常。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;分析&lt;/p&gt;

&lt;p&gt;当把路径改为/tmp/目录下则运行都正常，经定位发现nginx master以root身份运行， 而nginx worker以nobody身份运行。
查看需要读写的文件路径， 发现只有root权限才能写。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;解决措施&lt;/p&gt;

&lt;p&gt;1） 发现代码以&amp;rdquo;r+&amp;ldquo;(更新模式,保存之前的数据)模式进行读文件，需改成&amp;rdquo;r&amp;rdquo;只读模式。
2） 把要写的文件路径改成其他可写，例如: chmod 777 data&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;http请求正常-而https出现-received-http-code-400-from-proxy-after-connect-错误-a-id-sec-4-7-4-name-sec-4-7-4-a&#34;&gt;http请求正常，而https出现“Received HTTP code 400 from proxy after CONNECT”错误.&lt;a id=&#34;sec-4-7-4&#34; name=&#34;sec-4-7-4&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;解决措施&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;检查openresty安装参数，是否把对应的https参数都装上。
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2）使用curl命令请求https时不能加&amp;rdquo;-x&amp;rdquo;参数，可以把域名:IP对加入到hosts文件中即可。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        
        <item>
            <title>个人常用面试题及其参考答案</title>
            <link>http://mospany.github.io/2017/03/01/personal-interview-questions/</link>
            <pubDate>Wed, 01 Mar 2017 19:27:08 CST</pubDate>
            <author>Mospan</author>
            <guid>http://mospany.github.io/2017/03/01/personal-interview-questions/</guid>
            <description>

&lt;p&gt;&lt;img src=&#34;//blog.mospan.cn/post/img/jobInterview.jpg&#34; alt=&#34;面试现场&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;开篇-a-id-sec-1-name-sec-1-a&#34;&gt;开篇&lt;a id=&#34;sec-1&#34; name=&#34;sec-1&#34;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;h2 id=&#34;请您自我介绍一下你自己-a-id-sec-1-1-name-sec-1-1-a&#34;&gt;请您自我介绍一下你自己？&lt;a id=&#34;sec-1-1&#34; name=&#34;sec-1-1&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;回答提示：一般人回答这个问题过于平常，只说姓名、年龄、爱好、工作经验，这些在简历上都有。其实，企业最希望知道的是求职者能否胜任工作，
包括：最强的技能、最深入研究的知识领域、个性中最积极的部分、做过的最成功的事，主要的成就等，这些都可以和学习无关，也可以和学习有关，
但要突出积极的个性和做事的能力，说得合情合理企业才会相信。企业很重视一个人的礼貌，求职者要尊重考官，在回答每个问题之后都说一句“谢谢”，
企业喜欢有礼貌的求职者。&lt;/p&gt;

&lt;h2 id=&#34;您平时主要用什么语言-主要时用户态还是内核态-a-id-sec-1-2-name-sec-1-2-a&#34;&gt;您平时主要用什么语言? 主要时用户态还是内核态?&lt;a id=&#34;sec-1-2&#34; name=&#34;sec-1-2&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;h1 id=&#34;技术-a-id-sec-2-name-sec-2-a&#34;&gt;技术&lt;a id=&#34;sec-2&#34; name=&#34;sec-2&#34;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;h2 id=&#34;用户态-a-id-sec-2-1-name-sec-2-1-a&#34;&gt;用户态&lt;a id=&#34;sec-2-1&#34; name=&#34;sec-2-1&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&#34;include-file-h-与-include-file-h-的区别-a-id-sec-2-1-1-name-sec-2-1-1-a&#34;&gt;#include&lt;file.h&gt; 与#include &amp;ldquo;file.h&amp;rdquo;的区别？&lt;a id=&#34;sec-2-1-1&#34; name=&#34;sec-2-1-1&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;答：前者是从Standard Library的路径寻找和引用file.h，而后者是从当前工作路径搜寻并引用file.h。&lt;/p&gt;

&lt;h3 id=&#34;堆栈溢出一般是由什么原因导致的-a-id-sec-2-1-2-name-sec-2-1-2-a&#34;&gt;堆栈溢出一般是由什么原因导致的？&lt;a id=&#34;sec-2-1-2&#34; name=&#34;sec-2-1-2&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;答:
1.  没有回收垃圾资源
2.  层次太深的递归调用&lt;/p&gt;

&lt;h3 id=&#34;程序的内存分配-a-id-sec-2-1-3-name-sec-2-1-3-a&#34;&gt;程序的内存分配&lt;a id=&#34;sec-2-1-3&#34; name=&#34;sec-2-1-3&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;答：一个由c/C++编译的程序占用的内存分为以下几个部分&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;栈区（stack）—由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。&lt;/li&gt;
&lt;li&gt;堆区（heap）—一般由程序员分配释放，若程序员不释放，程序结束时可能由OS回收。注意它与数据结构中的堆是两回事，分配方式倒是类似于链表，呵呵。&lt;/li&gt;
&lt;li&gt;全局区（静态区）（static）—全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域，未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。程序结束后由系统释放。&lt;/li&gt;
&lt;li&gt;文字常量区—常量字符串就是放在这里的。程序结束后由系统释放。&lt;/li&gt;
&lt;li&gt;程序代码区—存放函数体的二进制代码&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;请说出const与-define-相比-有何优点-a-id-sec-2-1-4-name-sec-2-1-4-a&#34;&gt;请说出const与#define 相比，有何优点？&lt;a id=&#34;sec-2-1-4&#34; name=&#34;sec-2-1-4&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;答：Const作用：定义常量、修饰函数参数、修饰函数返回值三个作用。被Const修饰的东西都受到强制保护，可以预防意外的变动，能提高程序的健壮性。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;const 常量有数据类型，而宏常量没有数据类型。编译器可以对前者进行类型安全检查。而对后者只进行字符替换，没有类型安全检查，并且在字符替换可能会产生意料不到的错误。&lt;/li&gt;
&lt;li&gt;有些集成化的调试工具可以对const 常量进行调试，但是不能对宏常量进行调试。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;论述含参数的宏与函数的优缺点-a-id-sec-2-1-5-name-sec-2-1-5-a&#34;&gt;论述含参数的宏与函数的优缺点&lt;a id=&#34;sec-2-1-5&#34; name=&#34;sec-2-1-5&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;答：        带参宏                  函数&lt;/p&gt;

&lt;p&gt;处理时间    编译时               程序运行时&lt;/p&gt;

&lt;p&gt;参数类型   没有参数类型问题      定义实参、形参类型&lt;/p&gt;

&lt;p&gt;处理过程   不分配内存            分配内存&lt;/p&gt;

&lt;p&gt;程序长度   变长                  不变&lt;/p&gt;

&lt;p&gt;运行速度   不占运行时间          调用和返回占用时间&lt;/p&gt;

&lt;h3 id=&#34;什么是平衡二叉树-a-id-sec-2-1-6-name-sec-2-1-6-a&#34;&gt;什么是平衡二叉树？&lt;a id=&#34;sec-2-1-6&#34; name=&#34;sec-2-1-6&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;答：左右子树都是平衡二叉树且左右子树的深度差值的绝对值不大于1。&lt;/p&gt;

&lt;h3 id=&#34;嵌入式系统中经常要用到无限循环-你怎么样用c编写死循环呢-a-id-sec-2-1-7-name-sec-2-1-7-a&#34;&gt;嵌入式系统中经常要用到无限循环，你怎么样用C编写死循环呢？&lt;a id=&#34;sec-2-1-7&#34; name=&#34;sec-2-1-7&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;答：这个问题用几个解决方案。我首选的方案是：&lt;/p&gt;

&lt;p&gt;while(1)
{
}&lt;/p&gt;

&lt;p&gt;一些程序员更喜欢如下方案：&lt;/p&gt;

&lt;p&gt;for(;;)
{
}&lt;/p&gt;

&lt;p&gt;这个实现方式让我为难，因为这个语法没有确切表达到底怎么回事。如果一个应试者给出这个作为方案，我将用这个作为一个机会去探究他们这样做的
基本原理。如果他们的基本答案是：“我被教着这样做，但从没有想到过为什么。”这会给我留下一个坏印象。&lt;/p&gt;

&lt;p&gt;第三个方案是用 goto&lt;/p&gt;

&lt;p&gt;Loop:
&amp;#x2026;
goto Loop;&lt;/p&gt;

&lt;p&gt;应试者如给出上面的方案，这说明或者他是一个汇编语言程序员（这也许是好事）或者他是一个想进入新领域的BASIC/FORTRAN程序员。&lt;/p&gt;

&lt;h3 id=&#34;位操作-bit-manipulation-a-id-sec-2-1-8-name-sec-2-1-8-a&#34;&gt;位操作（Bit manipulation）&lt;a id=&#34;sec-2-1-8&#34; name=&#34;sec-2-1-8&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;答：嵌入式系统总是要用户对变量或寄存器进行位操作。给定一个整型变量a，写两段代码，第一个设置a的bit 3，第二个清除a 的bit 3。在以上两个操作中，要保持其它位不变。
对这个问题有三种基本的反应&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;不知道如何下手。该被面者从没做过任何嵌入式系统的工作。&lt;/li&gt;
&lt;li&gt;用bit fields。Bit fields是被扔到C语言死角的东西，它保证你的代码在不同编译器之间是不可移植的，同时也保证了的你的代码是不可重用的。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我最近不幸看到 Infineon为其较复杂的通信芯片写的驱动程序，它用到了bit fields因此完全对我无用，因为我的编译器用其它的方式来实现bit fields的。从道德讲：永远不要让一个非嵌入式的家伙粘实际硬件的边。
1.  用 #defines 和 bit masks 操作。这是一个有极高可移植性的方法，是应该被用到的方法。最佳的解决方案如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#define BIT3 (0x1 &amp;lt;&amp;lt; 3)
static int a;

void set_bit3(void) 
{
    a |= BIT3;
}
void clear_bit3(void) 
{
    a &amp;amp;= ~BIT3;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一些人喜欢为设置和清除值而定义一个掩码同时定义一些说明常数，这也是可以接受的。我希望看到几个要点：说明常数、|=和&amp;amp;=~操作。&lt;/p&gt;

&lt;h3 id=&#34;用户进程间通信主要哪几种方式-a-id-sec-2-1-9-name-sec-2-1-9-a&#34;&gt;用户进程间通信主要哪几种方式&lt;a id=&#34;sec-2-1-9&#34; name=&#34;sec-2-1-9&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;答:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;管道&lt;/li&gt;
&lt;li&gt;命名管道&lt;/li&gt;
&lt;li&gt;信号&lt;/li&gt;
&lt;li&gt;消息（Message）队&lt;/li&gt;
&lt;li&gt;共享内存&lt;/li&gt;
&lt;li&gt;信号量&lt;/li&gt;
&lt;li&gt;套接字&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;线程同步方法-a-id-sec-2-1-10-name-sec-2-1-10-a&#34;&gt;线程同步方法&lt;a id=&#34;sec-2-1-10&#34; name=&#34;sec-2-1-10&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;答:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;互斥锁&lt;/li&gt;
&lt;li&gt;条件变量&lt;/li&gt;
&lt;li&gt;信号量&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;父子进程哪些是共享的哪些时独立的-a-id-sec-2-1-11-name-sec-2-1-11-a&#34;&gt;父子进程哪些是共享的哪些时独立的?&lt;a id=&#34;sec-2-1-11&#34; name=&#34;sec-2-1-11&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;用户态调试-a-id-sec-2-1-12-name-sec-2-1-12-a&#34;&gt;用户态调试&lt;a id=&#34;sec-2-1-12&#34; name=&#34;sec-2-1-12&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;答: printf -&amp;gt; ldd -&amp;gt; gdb -&amp;gt; strace -&amp;gt;coredump;&lt;/p&gt;

&lt;h2 id=&#34;内核态-a-id-sec-2-2-name-sec-2-2-a&#34;&gt;内核态&lt;a id=&#34;sec-2-2&#34; name=&#34;sec-2-2&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&#34;内核与用户态的通信方式-a-id-sec-2-2-1-name-sec-2-2-1-a&#34;&gt;内核与用户态的通信方式?&lt;a id=&#34;sec-2-2-1&#34; name=&#34;sec-2-2-1&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;答:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;内核启动参数&lt;/li&gt;
&lt;li&gt;模块参数与sysfs&lt;/li&gt;
&lt;li&gt;Sysctl&lt;/li&gt;
&lt;li&gt;系统调用&lt;/li&gt;
&lt;li&gt;Netlink&lt;/li&gt;
&lt;li&gt;/proc&lt;/li&gt;
&lt;li&gt;Seq_file&lt;/li&gt;
&lt;li&gt;Debugfs&lt;/li&gt;
&lt;li&gt;Relayfs&lt;/li&gt;
&lt;li&gt;brk()&lt;/li&gt;
&lt;li&gt;信号&lt;/li&gt;
&lt;li&gt;内存映射机制&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;怎么加载内核模块-insmod与modprobe有什么区别-怎么查看模块信息-a-id-sec-2-2-2-name-sec-2-2-2-a&#34;&gt;怎么加载内核模块? insmod与modprobe有什么区别? 怎么查看模块信息?&lt;a id=&#34;sec-2-2-2&#34; name=&#34;sec-2-2-2&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;答: insmod/modprobe, modprobe自动找出依赖关系, modinfo查看模块信息,
demesg查看输出信息.&lt;/p&gt;

&lt;h3 id=&#34;内核同步方法-a-id-sec-2-2-3-name-sec-2-2-3-a&#34;&gt;内核同步方法&lt;a id=&#34;sec-2-2-3&#34; name=&#34;sec-2-2-3&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;每CPU变量&lt;/li&gt;
&lt;li&gt;原子操作&lt;/li&gt;
&lt;li&gt;优化和内存屏蔽&lt;/li&gt;
&lt;li&gt;自旋锁&lt;/li&gt;
&lt;li&gt;读写自旋锁&lt;/li&gt;
&lt;li&gt;顺序锁&lt;/li&gt;
&lt;li&gt;RCU&lt;/li&gt;
&lt;li&gt;内核信号量&lt;/li&gt;
&lt;li&gt;读写信号量&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;死锁原因与避免-a-id-sec-2-2-4-name-sec-2-2-4-a&#34;&gt;死锁原因与避免&lt;a id=&#34;sec-2-2-4&#34; name=&#34;sec-2-2-4&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;答:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;两次请求同一个锁&lt;/li&gt;
&lt;li&gt;ABBA锁&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;中断下半部有哪几种实现方式-与应用场景-a-id-sec-2-2-5-name-sec-2-2-5-a&#34;&gt;中断下半部有哪几种实现方式? 与应用场景?&lt;a id=&#34;sec-2-2-5&#34; name=&#34;sec-2-2-5&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;答: 软中断, tasklet, 工作队列&lt;/p&gt;

&lt;h3 id=&#34;说说你认为内核中最关键的几个数据结构-a-id-sec-2-2-6-name-sec-2-2-6-a&#34;&gt;说说你认为内核中最关键的几个数据结构?&lt;a id=&#34;sec-2-2-6&#34; name=&#34;sec-2-2-6&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;答: net_device, sk_buff, socket, sock, file;&lt;/p&gt;

&lt;h3 id=&#34;硬中断和软中断的区别-a-id-sec-2-2-7-name-sec-2-2-7-a&#34;&gt;硬中断和软中断的区别&lt;a id=&#34;sec-2-2-7&#34; name=&#34;sec-2-2-7&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;软中断是执行中断指令产生的，而硬中断是由外设引发的。&lt;/p&gt;

&lt;p&gt;硬中断的中断号是由中断控制器提供的，软中断的中断号由指令直接指出，无需使用中断控制器。&lt;/p&gt;

&lt;p&gt;硬中断是可屏蔽的，软中断不可屏蔽。&lt;/p&gt;

&lt;p&gt;硬中断处理程序要确保它能快速地完成任务，这样程序执行时才不会等待较长时间，称为上半部。&lt;/p&gt;

&lt;p&gt;软中断处理硬中断未完成的工作，是一种推后执行的机制，属于下半部。&lt;/p&gt;

&lt;h3 id=&#34;几种分配函数的比较-a-id-sec-2-2-8-name-sec-2-2-8-a&#34;&gt;几种分配函数的比较&lt;a id=&#34;sec-2-2-8&#34; name=&#34;sec-2-2-8&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;　　分配原理最大内存其他&lt;/p&gt;

&lt;p&gt;　　__get_free_pages直接对页框进行操作4MB适用于分配较大量的连续物理内存&lt;/p&gt;

&lt;p&gt;　　kmem_cache_alloc基于slab机制实现128KB适合需要频繁申请释放相同大小内存块时使用&lt;/p&gt;

&lt;p&gt;　　kmalloc基于kmem_cache_alloc实现128KB最常见的分配方式，需要小于页框大小的内存时可以使用&lt;/p&gt;

&lt;p&gt;　　vmalloc建立非连续物理内存到虚拟地址的映射物理不连续，适合需要大内存，但是对地址连续性没有要求的场合&lt;/p&gt;

&lt;p&gt;　　dma_alloc_coherent基于__alloc_pages实现4MB适用于DMA操 作&lt;/p&gt;

&lt;p&gt;　　ioremap实现已知物理地址到虚拟地址的映射适用于物理地址已知的场合，如设备驱动&lt;/p&gt;

&lt;p&gt;　　alloc_bootmem在启动kernel时，预留一段内存，内核看不见小于物理内存大小，内存管理要求较高&lt;/p&gt;

&lt;h3 id=&#34;怎么实现cpu与网卡多通道中断绑定-a-id-sec-2-2-9-name-sec-2-2-9-a&#34;&gt;怎么实现CPU与网卡多通道中断绑定?&lt;a id=&#34;sec-2-2-9&#34; name=&#34;sec-2-2-9&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;数据包各层头主要包含哪些关键字段-a-id-sec-2-2-10-name-sec-2-2-10-a&#34;&gt;数据包各层头主要包含哪些关键字段?&lt;a id=&#34;sec-2-2-10&#34; name=&#34;sec-2-2-10&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;简述netfilter框架-a-id-sec-2-2-11-name-sec-2-2-11-a&#34;&gt;简述netfilter框架&lt;a id=&#34;sec-2-2-11&#34; name=&#34;sec-2-2-11&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;说说你自己理解的linux内核tcp-ip协议栈-最好用关键函数表示-a-id-sec-2-2-12-name-sec-2-2-12-a&#34;&gt;说说你自己理解的linux内核TCP/IP协议栈?(最好用关键函数表示)&lt;a id=&#34;sec-2-2-12&#34; name=&#34;sec-2-2-12&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;说说tcp拥塞控制-a-id-sec-2-2-13-name-sec-2-2-13-a&#34;&gt;说说TCP拥塞控制&lt;a id=&#34;sec-2-2-13&#34; name=&#34;sec-2-2-13&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;答: 慢启动, 拥塞避免, 快速恢复,快速重传&lt;/p&gt;

&lt;h3 id=&#34;说说网卡驱动框架-a-id-sec-2-2-14-name-sec-2-2-14-a&#34;&gt;说说网卡驱动框架&lt;a id=&#34;sec-2-2-14&#34; name=&#34;sec-2-2-14&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;内核态调试-a-id-sec-2-2-15-name-sec-2-2-15-a&#34;&gt;内核态调试&lt;a id=&#34;sec-2-2-15&#34; name=&#34;sec-2-2-15&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;BUG()与BUG_ON()&lt;/li&gt;
&lt;li&gt;dump_stack()&lt;/li&gt;
&lt;li&gt;printk()&lt;/li&gt;
&lt;li&gt;OOPS&lt;/li&gt;
&lt;li&gt;kdump&lt;/li&gt;
&lt;li&gt;kgdb&lt;/li&gt;
&lt;li&gt;kprobe&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;协议-a-id-sec-2-3-name-sec-2-3-a&#34;&gt;协议&lt;a id=&#34;sec-2-3&#34; name=&#34;sec-2-3&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&#34;三次握手及四次挥手-a-id-sec-2-3-1-name-sec-2-3-1-a&#34;&gt;三次握手及四次挥手&lt;a id=&#34;sec-2-3-1&#34; name=&#34;sec-2-3-1&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;答:&lt;/p&gt;

&lt;p&gt;三次握手: SYN -&amp;gt; SYN/ACK -&amp;gt; ACK;&lt;/p&gt;

&lt;p&gt;四次挥手: FIN -&amp;gt; ACK -&amp;gt; FIN -&amp;gt; ACK;&lt;/p&gt;

&lt;h3 id=&#34;tcp状态变迁及对应函数调用-a-id-sec-2-3-2-name-sec-2-3-2-a&#34;&gt;TCP状态变迁及对应函数调用&lt;a id=&#34;sec-2-3-2&#34; name=&#34;sec-2-3-2&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;答: 11种(LISTEN, SYN_SENT, SYN_RCVD, ESTABLISHED, FIN_WAIT_1, CLOSE_WAIT, FIN_WAIT_2, TIME_WAIT, LAST_ACK, CLOSING, CLOSED);&lt;/p&gt;

&lt;h3 id=&#34;dns协议是tcp-udp协议-端口是多少-a-id-sec-2-3-3-name-sec-2-3-3-a&#34;&gt;DNS协议是TCP/UDP协议? 端口是多少?&lt;a id=&#34;sec-2-3-3&#34; name=&#34;sec-2-3-3&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;听说过edns-client-subnet-a-id-sec-2-3-4-name-sec-2-3-4-a&#34;&gt;听说过edns-client-subnet?&lt;a id=&#34;sec-2-3-4&#34; name=&#34;sec-2-3-4&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;dns资源记录-a-id-sec-2-3-5-name-sec-2-3-5-a&#34;&gt;DNS资源记录&lt;a id=&#34;sec-2-3-5&#34; name=&#34;sec-2-3-5&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;A ipv4地址&lt;/li&gt;
&lt;li&gt;AAAA ipv6地址&lt;/li&gt;
&lt;li&gt;NS 授权DNS地址&lt;/li&gt;
&lt;li&gt;MX 邮件服务器地址&lt;/li&gt;
&lt;li&gt;CNAME 别名记录&lt;/li&gt;
&lt;li&gt;PTR 反向解析记录&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;dns查询过程-a-id-sec-2-3-6-name-sec-2-3-6-a&#34;&gt;DNS查询过程&lt;a id=&#34;sec-2-3-6&#34; name=&#34;sec-2-3-6&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;http工作流程-a-id-sec-2-3-7-name-sec-2-3-7-a&#34;&gt;http工作流程&lt;a id=&#34;sec-2-3-7&#34; name=&#34;sec-2-3-7&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;一次HTTP操作称为一个事务，其工作过程可分为四步：&lt;/p&gt;

&lt;p&gt;1）首先客户机与服务器需要建立连接。只要单击某个超级链接，HTTP的工作开始。
2）建立连接后，客户机发送一个请求给服务器，请求方式的格式为：统一资源标识符（URL）、协议版本号，后边是MIME信息包括请求修饰符、客户机信息和可能的内容。
3）服务器接到请求后，给予相应的响应信息，其格式为一个状态行，包括信息的协议版本号、一个成功或错误的代码，后边是MIME信息包括服务器信息、实体信息和可能的内容。
4）客户端接收服务器所返回的信息通过浏览器显示在用户的显示屏上，然后客户机与服务器断开连接。
如果在以上过程中的某一步出现错误，那么产生错误的信息将返回到客户端，有显示屏输出。对于用户来说，这些过程是由HTTP自己完成的，用户只要用鼠标点击，等待信息显示就可以了。&lt;/p&gt;

&lt;h3 id=&#34;http-状态码描述-a-id-sec-2-3-8-name-sec-2-3-8-a&#34;&gt;http 状态码描述&lt;a id=&#34;sec-2-3-8&#34; name=&#34;sec-2-3-8&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;1XX－信息类(Information),表示收到Web浏览器请求，正在进一步的处理中
2XX－成功类（Successful）,表示用户请求被正确接收，理解和处理例如：200 OK
3XX-重定向类(Redirection),表示请求没有成功，客户必须采取进一步的动作。
4XX-客户端错误(Client Error)，表示客户端提交的请求有错误 例如：404 NOT Found，意味着请求中所引用的文档不存在。
5XX-服务器错误(Server Error)表示服务器不能完成对请求的处理：如 500&lt;/p&gt;

&lt;h1 id=&#34;原有项目介绍-a-id-sec-3-name-sec-3-a&#34;&gt;原有项目介绍&lt;a id=&#34;sec-3&#34; name=&#34;sec-3&#34;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;h1 id=&#34;项目管理-a-id-sec-4-name-sec-4-a&#34;&gt;项目管理&lt;a id=&#34;sec-4&#34; name=&#34;sec-4&#34;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;h3 id=&#34;学过项目管理认证方面的课程吗-a-id-sec-4-0-1-name-sec-4-0-1-a&#34;&gt;学过项目管理认证方面的课程吗?&lt;a id=&#34;sec-4-0-1&#34; name=&#34;sec-4-0-1&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;h1 id=&#34;综合-a-id-sec-5-name-sec-5-a&#34;&gt;综合&lt;a id=&#34;sec-5&#34; name=&#34;sec-5&#34;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;h2 id=&#34;你对于我们公司有过了解吗-a-id-sec-5-1-name-sec-5-1-a&#34;&gt;你对于我们公司有过了解吗？&lt;a id=&#34;sec-5-1&#34; name=&#34;sec-5-1&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;回答提示：在去公司面试前上网查一下该公司主营业务。如回答：贵公司有意改变策略，加强与国外大厂的OEM合作，自有品牌的部分则透过海外经销商。&lt;/p&gt;

&lt;h2 id=&#34;你最擅长的技术方向是什么-a-id-sec-5-2-name-sec-5-2-a&#34;&gt;你最擅长的技术方向是什么？&lt;a id=&#34;sec-5-2&#34; name=&#34;sec-5-2&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;回答提示：说和你要应聘的职位相关的课程，表现一下自己的热诚没有什么坏处。&lt;/p&gt;

&lt;h2 id=&#34;你的业余爱好是什么-a-id-sec-5-3-name-sec-5-3-a&#34;&gt;你的业余爱好是什么？&lt;a id=&#34;sec-5-3&#34; name=&#34;sec-5-3&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;回答提示：找一些富于团体合作精神的，这里有一个真实的故事：有人被否决掉，因为他的爱好是深海潜水。主考官说：因为这是一项单人活动，我不敢肯定他能否适应团体工作。&lt;/p&gt;

&lt;h2 id=&#34;你欣赏哪种性格的人-a-id-sec-5-4-name-sec-5-4-a&#34;&gt;你欣赏哪种性格的人？&lt;a id=&#34;sec-5-4&#34; name=&#34;sec-5-4&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;回答提示：诚实、不死板而且容易相处的人、有“实际行动”的人。&lt;/p&gt;

&lt;h2 id=&#34;你做过的哪件事最令自己感到骄傲-a-id-sec-5-5-name-sec-5-5-a&#34;&gt;你做过的哪件事最令自己感到骄傲？&lt;a id=&#34;sec-5-5&#34; name=&#34;sec-5-5&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;回答提示：这是考官给你的一个机会，让你展示自己把握命运的能力。这会体现你潜在的领导能力以及你被提升的可能性。
假如你应聘于一个服务性质的单位，你很可能会被邀请去午餐。记住：你的前途取决于你的知识、你的社交能力和综合表现。&lt;/p&gt;

&lt;h2 id=&#34;你觉得你个性上最大的优点是什么-a-id-sec-5-6-name-sec-5-6-a&#34;&gt;你觉得你个性上最大的优点是什么？&lt;a id=&#34;sec-5-6&#34; name=&#34;sec-5-6&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;回答提示：沉着冷静、条理清楚、立场坚定、顽强向上、乐于助人和关心他人、适应能力和幽默感、乐观和友爱。
我在北大青鸟经过一到两年的培训及项目实战，加上实习工作，使我适合这份工作。&lt;/p&gt;

&lt;h2 id=&#34;说说你最大的缺点-a-id-sec-5-7-name-sec-5-7-a&#34;&gt;说说你最大的缺点？&lt;a id=&#34;sec-5-7&#34; name=&#34;sec-5-7&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;回答提示：这个问题企业问的概率很大，通常不希望听到直接回答的缺点是什么等，如果求职者说自己小心眼、爱忌妒人、非常懒、脾气大、工作效率低，
企业肯定不会录用你。绝对不要自作聪明地回答“我最大的缺点是过于追求完美”，有的人以为这样回答会显得自己比较出色，但事实上，他已经岌岌可危了。
企业喜欢求职者从自己的优点说起，中间加一些小缺点，最后再把问题转回到优点上，突出优点的部分，企业喜欢聪明的求职者。&lt;/p&gt;

&lt;h2 id=&#34;为什么要离职-a-id-sec-5-8-name-sec-5-8-a&#34;&gt;为什么要离职?&lt;a id=&#34;sec-5-8&#34; name=&#34;sec-5-8&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;回答提示：①回答这个问题时一定要小心，就算在前一个工作受到再大的委屈，对公司有多少的怨言，都千万不要表现出来，尤其要避免对公司本身主管的批评，
避免面试官的负面情绪及印象。建议此时最好的回答方式是将问题归咎在自己身上，例如觉得工作没有学习发展的空间，自己想在面试工作的相关产业中多加学习，
或是前一份工作与自己的生涯规划不合等等，回答的答案最好是积极正面的。②我希望能获得一份更好的工作，如果机会来临，我会抓住。我觉得目前的工作，已经达到顶峰，
即沒有升迁机会。&lt;/p&gt;

&lt;h2 id=&#34;您最近这两年看过的书有哪些-a-id-sec-5-9-name-sec-5-9-a&#34;&gt;您最近这两年看过的书有哪些?&lt;a id=&#34;sec-5-9&#34; name=&#34;sec-5-9&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;说说你对行业-技术发展趋势的看法-a-id-sec-5-10-name-sec-5-10-a&#34;&gt;说说你对行业、技术发展趋势的看法？&lt;a id=&#34;sec-5-10&#34; name=&#34;sec-5-10&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;回答提示：企业对这个问题很感兴趣，只有有备而来的求职者能够过关。求职者可以直接在网上查找对你所申请的行业部门的信息，只有深入了解才能产生独特的见解。
企业认为最聪明的求职者是对所面试的公司预先了解很多，包括公司各个部门，发展情况，在面试回答问题的时候可以提到所了解的情况，企业欢迎进入企业的人是“知己”，而不是“盲人” 。&lt;/p&gt;

&lt;h2 id=&#34;在五年的时间内-你的职业规划-a-id-sec-5-11-name-sec-5-11-a&#34;&gt;在五年的时间内，你的职业规划？&lt;a id=&#34;sec-5-11&#34; name=&#34;sec-5-11&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;回答提示：这是每一个应聘者都不希望被问到的问题，但是几乎每个人都会被问到，比较多的答案是“管理者”。但是近几年来，许多公司都已经建立了专门的技术途径。
这些工作地位往往被称作“顾问”、“参议技师”或“高级软件工程师”等等。当然，说出其他一些你感兴趣的职位也是可以的，比如产品销售部经理，生产部经理等一些与
你的专业有相关背景的工作。要知道，考官总是喜欢有进取心的应聘者，此时如果说“不知道”，或许就会使你丧失一个好机会。最普通的回答应该是“我准备在技术领域有所
作为”或“我希望能按照公司的管理思路发展”。&lt;/p&gt;

&lt;h2 id=&#34;你对薪资的要求-a-id-sec-5-12-name-sec-5-12-a&#34;&gt;你对薪资的要求？&lt;a id=&#34;sec-5-12&#34; name=&#34;sec-5-12&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;回答提示：如果你对薪酬的要求太低，那显然贬低自己的能力；如果你对薪酬的要求太高，那又会显得你分量过重，公司受用不起。一些雇主通常都事先对求聘
的职位定下开支预算，因而他们第一次提出的价钱往往是他们所能给予的最高价钱，他们问你只不过想证实一下这笔钱是否足以引起你对该工作的兴趣。&lt;/p&gt;

&lt;p&gt;回答样本一：我对工资没有硬性要求，我相信贵公司在处理我的问题上会友善合理。我注重的是找对工作机会，所以只要条件公平，我则不会计较太多。
回答样本二：我受过系统的软件编程的训练，不需要进行大量的培训，而且我本人也对编程特别感兴趣。因此，我希望公司能根据我的情况和市场标准的水平，给我合理的薪水。
回答样本三：如果你必须自己说出具体数目，请不要说一个宽泛的范围，那样你将只能得到最低限度的数字。最好给出一个具体的数字，这样表明你已经对当今的人才市场作了调查，
知道像自己这样学历的雇员有什么样的价值。&lt;/p&gt;

&lt;h1 id=&#34;其他-a-id-sec-6-name-sec-6-a&#34;&gt;其他&lt;a id=&#34;sec-6&#34; name=&#34;sec-6&#34;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;h2 id=&#34;您还有什么需要问我的吗-a-id-sec-6-1-name-sec-6-1-a&#34;&gt;您还有什么需要问我的吗?&lt;a id=&#34;sec-6-1&#34; name=&#34;sec-6-1&#34;&gt;&lt;/a&gt;&lt;/h2&gt;
</description>
        </item>
        
        <item>
            <title>DPDK开发随记</title>
            <link>http://mospany.github.io/2016/09/06/dpdk-develop-notes/</link>
            <pubDate>Tue, 06 Sep 2016 19:37:20 CST</pubDate>
            <author>Mospan</author>
            <guid>http://mospany.github.io/2016/09/06/dpdk-develop-notes/</guid>
            <description>

&lt;h1 id=&#34;性能调优-a-id-sec-1-name-sec-1-a&#34;&gt;性能调优&lt;a id=&#34;sec-1&#34; name=&#34;sec-1&#34;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;h2 id=&#34;rte-rand-a-id-sec-1-1-name-sec-1-1-a&#34;&gt;rte_rand()&lt;a id=&#34;sec-1-1&#34; name=&#34;sec-1-1&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;现象：使用top perf -g查看时发现__drand48_iterate()所占比例达到40%以上。&lt;/li&gt;
&lt;li&gt;分析：跟踪__drand48_iterate()跟随机数有关， 查看代码响应记录按权重比例负载时使用了rte_rand().&lt;/li&gt;
&lt;li&gt;测试：屏蔽掉rte_rand()，性能上升了100多万。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;faq-a-id-sec-2-name-sec-2-a&#34;&gt;FAQ&lt;a id=&#34;sec-2&#34; name=&#34;sec-2&#34;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;h2 id=&#34;打开dpdk工程makefile编译详细信息-a-id-sec-2-1-name-sec-2-1-a&#34;&gt;打开DPDK工程Makefile编译详细信息？&lt;a id=&#34;sec-2-1&#34; name=&#34;sec-2-1&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;答：&lt;br /&gt;
1.  打开dpdk/mk/rte.sdkroot.mk文件。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;把变量Q赋为空。&lt;/p&gt;

&lt;h1 id=&#34;define-q-to-or-not-q-is-used-to-prefix-all-shell-commands-to&#34;&gt;define Q to &amp;lsquo;@&amp;rsquo; or not. $(Q) is used to prefix all shell commands to&lt;/h1&gt;

&lt;h1 id=&#34;be-executed-silently&#34;&gt;be executed silently.&lt;/h1&gt;

&lt;p&gt;Q=&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;查看某个库或可执行程序的编译参数-a-id-sec-2-2-name-sec-2-2-a&#34;&gt;查看某个库或可执行程序的编译参数？&lt;a id=&#34;sec-2-2&#34; name=&#34;sec-2-2&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;cd dpdk/x86_64-native-linuxapp-gcc/build/&lt;/li&gt;
&lt;li&gt;选择进入app  drivers  lib之一的目录&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;3）例如进入lib/librte_meter下&lt;br /&gt;
4）使用ls -a查看所有隐藏文件&lt;br /&gt;
5）使用cat命令将会看到如下文件内容：&lt;br /&gt;
-   .rte_meter.o.cmd: 编译生成该.o文件的所有gcc参数。
-   .rte_meter.o.d: 编译中依赖的文件
-   .librte_meter.a.cmd: 链接生成目标文件的命令参数&lt;/p&gt;

&lt;h2 id=&#34;出现这个错误-include-dpdk-rte-memcpy-h-870-2-错误-mm-storeu-si128-的第-2-个实参类型不兼容的解决办法-a-id-sec-2-3-name-sec-2-3-a&#34;&gt;出现这个错误： include/dpdk/rte_memcpy.h:870:2: 错误：‘_mm_storeu_si128’的第 2 个实参类型不兼容的解决办法&lt;a id=&#34;sec-2-3&#34; name=&#34;sec-2-3&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;答：&lt;br /&gt;
1.  只要在自己的Makefile中增加如下两行即可。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    include $(RTE_SDK)/mk/rte.vars.mk
    include $(RTE_SDK)/mk/internal/rte.build-pre.mk
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;在虚拟机中跑dpdk-网卡接收不正常问题-a-id-sec-2-4-name-sec-2-4-a&#34;&gt;在虚拟机中跑DPDK，网卡接收不正常问题。&lt;a id=&#34;sec-2-4&#34; name=&#34;sec-2-4&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&#34;现象-a-id-sec-2-4-1-name-sec-2-4-1-a&#34;&gt;现象&lt;a id=&#34;sec-2-4-1&#34; name=&#34;sec-2-4-1&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;虚拟出来的网卡只收到了少量的ARP包，并且QANS可以响应ARP请求成功，但收不到icmp与DNS包等。&lt;/p&gt;

&lt;h3 id=&#34;调试过程-a-id-sec-2-4-2-name-sec-2-4-2-a&#34;&gt;调试过程&lt;a id=&#34;sec-2-4-2&#34; name=&#34;sec-2-4-2&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;虚拟网卡虚拟出来的是intel 82540EM网卡。&lt;/li&gt;
&lt;li&gt;查看DPDK官方支持网卡列表，支持intel 82540，但不知道与82540EM有哪些细微差别。&lt;/li&gt;
&lt;li&gt;尝试了virtual下可配的虚拟网卡(82545em，82543gc, 82545em，virtio-net)，无一完全成功。&lt;/li&gt;
&lt;li&gt;网卡流量统计，确实只收到了少量与arp包数等同的包(一直ping了10多分钟)。&lt;/li&gt;
&lt;li&gt;查看了KNI创建的虚拟网卡发现每次启动MAC地址都随机的变化，查看了官方文档与网上结论说有些时候网卡MAC会随机变化，但没有说具体原因情况。&lt;/li&gt;
&lt;li&gt;使用DPDK本身提供的接口rte_eth_macaddr_get()进行读取，发现与物理网卡一致而与KNI创建出的虚拟网卡不一致。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;原因-a-id-sec-2-4-3-name-sec-2-4-3-a&#34;&gt;原因&lt;a id=&#34;sec-2-4-3&#34; name=&#34;sec-2-4-3&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;使用虚拟机创建出的KNI虚拟机网卡，每次重启后会随机变化并且与物理网卡不一致，到时ARP学习不正常。&lt;/p&gt;

&lt;h3 id=&#34;解决办法-a-id-sec-2-4-4-name-sec-2-4-4-a&#34;&gt;解决办法&lt;a id=&#34;sec-2-4-4&#34; name=&#34;sec-2-4-4&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;在KNI创建虚拟机网卡成功后，使用命令: ifconfig XX hw ether XX:XX:XX:XX:XX:XX 进行配置成物理网卡MAC即可。&lt;/p&gt;

&lt;h2 id=&#34;出现igb-uio-unknown-symbol-uio-unregister-device的解决办法-a-id-sec-2-5-name-sec-2-5-a&#34;&gt;出现igb_uio: Unknown symbol uio_unregister_device的解决办法？&lt;a id=&#34;sec-2-5&#34; name=&#34;sec-2-5&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;答：&lt;br /&gt;
   在dpdk/lib/librte_eal/linuxapp/igb_uio/Makefile中添加如下行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;KBUILD_EXTRA_SYMBOLS=/usr/src/linux-headers-`uname -r`/Module.symvers
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;使用vmware-exsi虚拟出来的vmnet3类型网卡不能绑定gib网卡将会系统挂掉的解决办法-a-id-sec-2-6-name-sec-2-6-a&#34;&gt;使用vmware EXSI虚拟出来的vmnet3类型网卡不能绑定gib网卡将会系统挂掉的解决办法。&lt;a id=&#34;sec-2-6&#34; name=&#34;sec-2-6&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;答：在vmware中换成E1000类型网卡即可正常。&lt;/p&gt;

&lt;h2 id=&#34;在最小ubuntu-16-04系统下要运行dpdk进程需安装文件列表-a-id-sec-2-7-name-sec-2-7-a&#34;&gt;在最小Ubuntu 16.04系统下要运行dpdk进程需安装文件列表。&lt;a id=&#34;sec-2-7&#34; name=&#34;sec-2-7&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;答: 只要安装如下软件即可。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;apt-get update&lt;/li&gt;
&lt;li&gt;apt-get install openssh-server&lt;/li&gt;
&lt;li&gt;apt-get install tcpdump&lt;/li&gt;
&lt;li&gt;apt install gcc&lt;/li&gt;
&lt;li&gt;apt install libpcap-dev&lt;/li&gt;
&lt;li&gt;apt install lrzsz&lt;/li&gt;
&lt;li&gt;apt install kernel-source&lt;/li&gt;
&lt;li&gt;apt-get install kernel-source&lt;/li&gt;
&lt;li&gt;apt-get install linux-headers-`uname -r`&lt;/li&gt;
&lt;li&gt;apt install python&lt;/li&gt;
&lt;li&gt;apt-get install make&lt;/li&gt;
&lt;li&gt;apt install libpcap-dev&lt;/li&gt;
&lt;li&gt;apt install doxygen&lt;/li&gt;
&lt;li&gt;apt-get install libdbus-1-dev&lt;/li&gt;
&lt;li&gt;apt-get install libdbus-glib-1-dev&lt;/li&gt;
&lt;li&gt;ln -sf dbus-1.0/dbus dbus&lt;/li&gt;
&lt;li&gt;apt install libssl-dev&lt;/li&gt;
&lt;li&gt;apt-get install libexpat1-dev&lt;/li&gt;
&lt;li&gt;apt install flex&lt;/li&gt;
&lt;li&gt;apt install tree&lt;/li&gt;
&lt;li&gt;apt install linux-tools-generic&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;在最小ubuntu-14-04系统下要运行dpdk进程需安装文件列表-a-id-sec-2-8-name-sec-2-8-a&#34;&gt;在最小Ubuntu 14.04系统下要运行dpdk进程需安装文件列表。&lt;a id=&#34;sec-2-8&#34; name=&#34;sec-2-8&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&#34;基本按照-a-id-sec-2-8-1-name-sec-2-8-1-a&#34;&gt;基本按照&lt;a id=&#34;sec-2-8-1&#34; name=&#34;sec-2-8-1&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;先参照如上Ubuntu 16.04所需的文件列表安装，如出现如下错误再逐一安装修改解决。&lt;/p&gt;

&lt;h3 id=&#34;内核build文件找不到-a-id-sec-2-8-2-name-sec-2-8-2-a&#34;&gt;内核build文件找不到？&lt;a id=&#34;sec-2-8-2&#34; name=&#34;sec-2-8-2&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;到&lt;a href=&#34;http://kernel.ubuntu.com/~kernel-ppa/mainline/&#34;&gt;http://kernel.ubuntu.com/~kernel-ppa/mainline/&lt;/a&gt; 下载对应的Headers包， 使用dpkg命令进行安装。&lt;br /&gt;
例如: dpkg -i linux-headers-4.10.17-041017_4.10.17-041017.201705201051_all.deb, 由于使用tcp_bbr而更新了内核版本。&lt;/p&gt;

&lt;h3 id=&#34;gcc-错误-unrecognized-command-line-option-fstack-protector-strong-a-id-sec-2-8-3-name-sec-2-8-3-a&#34;&gt;gcc: 错误： unrecognized command line option ‘-fstack-protector-strong’&lt;a id=&#34;sec-2-8-3&#34; name=&#34;sec-2-8-3&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Ubuntu 14.04自带的gcc版本为gcc (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4, (‘-fstack-protector-strong’ 选项是gcc4.9以后的版本才加入的，也就是说需要安装gcc4.9以后的版本才可以编译通过).&lt;br /&gt;
-   安装gcc 5.4版本&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;详见：[Ubuntu 14.04 LTS 下升级 gcc 到 gcc-4.9、gcc-5 版本](https://www.cnblogs.com/BlackStorm/p/5183490.html)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;dpdk在内核4-10-17下编译不过-a-id-sec-2-8-4-name-sec-2-8-4-a&#34;&gt;DPDK在内核4.10.17下编译不过？&lt;a id=&#34;sec-2-8-4&#34; name=&#34;sec-2-8-4&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;需要打如下3个patch:&lt;br /&gt;
1.  patch dpdk-dev-1-3-kni-fix-compile-error-for-Linux-4.7.patch, see to &lt;a href=&#34;http://dpdk.org/dev/patchwork/patch/13100/&#34;&gt;http://dpdk.org/dev/patchwork/patch/13100/&lt;/a&gt;
2.  patch dpdk-dev-kni-fix-build-with-kernel-4.9.patch, see to &lt;a href=&#34;http://dpdk.org/dev/patchwork/patch/16651/&#34;&gt;http://dpdk.org/dev/patchwork/patch/16651/&lt;/a&gt;
3.  patch dpdk-dev-v2-kni-fix-build-with-kernel-4.8.patch, see to &lt;a href=&#34;http://dpdk.org/dev/patchwork/patch/15717/&#34;&gt;http://dpdk.org/dev/patchwork/patch/15717/&lt;/a&gt;]&lt;/p&gt;

&lt;h3 id=&#34;fatal-error-dbus-dbus-arch-deps-h-no-such-file-or-directory-a-id-sec-2-8-5-name-sec-2-8-5-a&#34;&gt;fatal error: dbus/dbus-arch-deps.h: No such file or directory&lt;a id=&#34;sec-2-8-5&#34; name=&#34;sec-2-8-5&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;apt-get install libdbus-1-dev&lt;/li&gt;
&lt;li&gt;apt-get install libdbus-glib-1-dev&lt;/li&gt;
&lt;li&gt;ln -sf /usr/include/dbus-1.0/dbus /usr/include/dbus&lt;/li&gt;
&lt;li&gt;cp &lt;em&gt;usr/lib/x86_64-linux-gnu/dbus-1.0/include/dbus/dbus-arch-deps.h /usr/include/dbus-1.0/dbus&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;apt-get install bison&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;librte-eal-a-eal-common-options-o-undefined-reference-to-symbol-dlopen-glibc-2-2-5-的解决办法-a-id-sec-2-8-6-name-sec-2-8-6-a&#34;&gt;librte_eal.a(eal_common_options.o): undefined reference to symbol &amp;lsquo;dlopen@@GLIBC_2.2.5&amp;rsquo;的解决办法？&lt;a id=&#34;sec-2-8-6&#34; name=&#34;sec-2-8-6&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;在编译的Makefile中的CFLAGS变量添加上: -Wl,&amp;#x2013;copy-dt-needed-entries&lt;br /&gt;
详见1: &lt;a href=&#34;http://fanrey.iteye.com/blog/2119610&#34;&gt;linker问题&lt;/a&gt;&lt;br /&gt;
详见2: &lt;a href=&#34;https://segmentfault.com/a/1190000002462705&#34;&gt;https://segmentfault.com/a/1190000002462705&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;rte-meter-c-57-undefined-reference-to-ceil-a-id-sec-2-8-7-name-sec-2-8-7-a&#34;&gt;rte_meter.c:57: undefined reference to `ceil&amp;rsquo;?&lt;a id=&#34;sec-2-8-7&#34; name=&#34;sec-2-8-7&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;编译tcpdump时链接报错，已包含&lt;math.h&gt;与-lm了， 还是编译不过，待定。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
